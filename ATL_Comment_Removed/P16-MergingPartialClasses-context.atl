

module MergingPartialClasses; 
create OUT : KM3 from IN : KM3;



helper context KM3!Reference def: isMerginable : Boolean =

	self.lower = 1 and self.upper = 1 and not self.isContainer

	;



helper def: assoMap : Map(KM3!Reference, Sequence(KM3!Reference)) = Map{};

rule isAlreadyConsidered(ref1 : KM3!Reference, ref2 : KM3!Reference) {



	do {

		if (not thisModule.assoMap.get(ref2).oclIsUndefined()) {

			if (thisModule.assoMap.get(ref2)->includes(ref1)) {

				true;

			}

			else {

			    if (not thisModule.assoMap.get(ref1).oclIsUndefined()) {

					thisModule.assoMap <- thisModule.assoMap.including(ref1,thisModule.assoMap.get(ref1)->including(ref2));

					false;

			    }

				else {

					thisModule.assoMap <- thisModule.assoMap.including(ref1, Sequence{ref2});

					false;

				}

			}

		}

		else  {

				if (not thisModule.assoMap.get(ref1).oclIsUndefined()) {

					thisModule.assoMap <- thisModule.assoMap.including(ref1,thisModule.assoMap.get(ref1)->including(ref2));

					false;

			    }

				else {	

					thisModule.assoMap <- thisModule.assoMap.including(ref1, Sequence{ref2});

					false;

				}

		}

		

	}

}







rule Metamodel {

	from

		inputMm:KM3!Metamodel

	to

		outputMm:KM3!Metamodel (

			location <- inputMm.location,

			contents <- inputMm.contents

		)

}



rule Package {

	from

		inputPkg:KM3!Package

	to

		outputPkg:KM3!Package (

			name <- inputPkg.name,

			contents <- inputPkg.contents

		)

}



rule DataType {

	from

		inputData:KM3!DataType

	to

		outputData:KM3!DataType(

			name <- inputData.name,

			location <- inputData.location

		)

}



rule EnumLiteral {

	from

		inputL:KM3!EnumLiteral

	to

		outputL:KM3!EnumLiteral (

			name <- inputL.name,

			location <- inputL.location,

			enum  <- inputL.enum,

			package <- inputL.package

		)

}



rule Enumeration {

	from

		inputEnum:KM3!Enumeration

	to

		outputEnum:KM3!Enumeration (

			name <- inputEnum.name,

			location <- inputEnum.location,

			package <- inputEnum.package,

			literals <- inputEnum.literals

		)

}



rule Class {

	from

		inputC:KM3!Class

		(not inputC.structuralFeatures->select(a|a.oclIsTypeOf(KM3!Reference))->exists(r| r.isMerginable and r.opposite.isMerginable))

	to

		outputC:KM3!Class (

			isAbstract <- inputC.isAbstract,

			supertypes <- inputC.supertypes,

			name <- inputC.name,

			location <- inputC.location,

			package <- inputC.package,

			structuralFeatures <- inputC.structuralFeatures

		)

}



rule Attribute {

	from

		inputAttr : KM3!Attribute

	to

		outputAttr : KM3!Attribute (

			package <- inputAttr.package,

			name <- inputAttr.name,

			lower <- inputAttr.lower,

			upper <- inputAttr.upper,

			isOrdered <- inputAttr.isOrdered,

			isUnique <- inputAttr.isUnique,

			owner <- inputAttr.owner,

			type <- inputAttr.type

		)

}



rule Reference {

	from

		inputRef : KM3!Reference

			( not (inputRef.isMerginable and inputRef.opposite.isMerginable))

	to

		outputRef : KM3!Reference (

			package <- inputRef.package,

			name <- inputRef.name,

			lower <- inputRef.lower,

			upper <- inputRef.upper,

			isOrdered <- inputRef.isOrdered,

			isUnique <- inputRef.isUnique,

			owner <- inputRef.owner,

			type <- inputRef.type,

			isContainer <- inputRef.isContainer,

			opposite <- inputRef.opposite

		)

}



rule Merging {

	from

		inputA : KM3!Reference,

		inputB : KM3!Reference

		(

			inputA.opposite = inputB

			and inputA.isMerginable

			and inputB.isMerginable

			and inputA <> inputB

			and not thisModule.isAlreadyConsidered(inputA, inputB)

		)





	to

		outputA : KM3!Class (

			package <- inputA.owner.package,

			name <- inputA.owner.name->concat(inputB.owner.name),

			isAbstract <- inputA.owner.isAbstract,

			structuralFeatures <- inputA.owner.structuralFeatures->select(b|b.oclIsTypeOf(KM3!Reference))->select(a| not a.isMerginable),

			structuralFeatures <- inputA.owner.structuralFeatures->select(b|b.oclIsTypeOf(KM3!Attribute)),

			structuralFeatures <- inputB.owner.structuralFeatures->select(b|b.oclIsTypeOf(KM3!Reference))->select(a| not a.isMerginable),

			structuralFeatures <- inputB.owner.structuralFeatures->select(b|b.oclIsTypeOf(KM3!Attribute))

		)

}







