module KM32DOT;

create OUT: DOT from IN: KM3;





	
	
	
	
helper def: DiagramType(): String = 'None';



	
	
	
	
helper def: Mode(): String = 'All';



	
	
	
	
	
	
	
helper def: Invisible(): Boolean = false;



	
	
	
helper def: MinimumArcLength(): Integer = 2;



	
	
	
helper def: MinimumNodeSeparation(): Real = 0.75;



	
	
	
	
	
helper def: RankingDirection(): String = 'BT';



helper def: LabelJustification(): String = 'l';



helper def: LabelLocation(): String = 't';



	
	
helper def: DataTypeHeader(): String = '&#171;DataType&#187;\\n';





	
	
	
	
helper def: DiagramMode(mode: String): Boolean =

	mode = thisModule.Mode();



	
	
	
	
helper context KM3!DataType def: getDataTypeHead(): String =

	thisModule.DataTypeHeader() + self.name;



	
	
	
	
	
helper context KM3!Class def: getLabel(): String =

	'{' + self.getName() + '|' 

	+ self.getAttributes() + '|' 

	+ self.getOperations() + '}';



	
	
	
	
	
helper context KM3!Class def: getName(): String = 

	if self.isAbstract then

		'/' + self.name + '/'

	else

		self.name

	endif;



	
	
	
	
	
helper context KM3!Class def: getAttributes(): String =

	let attributes : Sequence(KM3!Attribute) = self.structuralFeatures->

		select( e |

		e.oclIsKindOf(KM3!Attribute)) in

	if attributes->notEmpty() then

		attributes->iterate( e; acc: String = '' |

			acc + if acc = '' then '' else '\\n' endif +

			e.name + e.getMultiplicity() + ' : ' + e.type.name

		)

	else

		' '

	endif;



	
	
	
	
	
helper context KM3!Class def: getOperations(): String =

	let operations : Sequence(KM3!Operation) = self.operations in

	if operations->notEmpty() then

		operations->iterate( e; acc: String = '' |

			acc + e.name + e.getParameters() +

			if e.type.oclIsUndefined() then

				''

			else

				' : ' 	+ e.type.name

			endif + '\\n')

	else

		' '

	endif;



	
	
	
	
helper context KM3!TypedElement def: getMultiplicity(): String =

	if self.lower = 0 then

		if self.upper = 0-1 then

			'[*]'

		else

			'[' + self.lower.toString() + '-' + self.upper.toString() + ']'

		endif

	else

		if self.upper = 1 then

			''

		else

			if self.upper = 0-1 then

				'[' + self.lower.toString() + '-' + '*]'

			else

				'[' + self.lower.toString() + self.upper.toString() + ']'

			endif

		endif

	endif;



	
	
	
	
	
helper context KM3!Operation def: getParameters(): String =

	let parameters : Sequence(KM3!Parameters) = self.parameters in

	'(' + parameters->iterate( e; acc: String = '' |

		acc + 

		if e.name = parameters->last().name then

			e.name + ' : ' + e.type.name

		else

			e.name + ' : ' + e.type.name + ','

		endif)

	+ ')';



	
	
	
	
	
	
	
helper def: relationsList: Sequence(

	TupleType(ref: KM3!Reference, opposite : KM3!Reference)) =

	let references: Sequence(KM3!Reference) = KM3!Reference.allInstances()->

	reject( e |

		e.opposite.oclIsUndefined()) in

	references->iterate( e; 

		acc: Sequence(TupleType(ref: KM3!Reference, opposite: KM3!Reference)) =

		Sequence{} |

			if acc->excludes(Tuple{ref = e, opposite = e.opposite}) then

				if acc->excludes(Tuple{ref = e.opposite, opposite = e}) then

					if e.opposite.isContainer then

						acc->append(Tuple{ref = e, opposite = e.opposite})

					else

						acc->append(Tuple{ref = e.opposite, opposite = e})

					endif

				else

					acc

				endif

			else

				acc

			endif);



	
	
	
	
rule Metamodel2Graph {

	from

		m: KM3!Metamodel

	to

		out: DOT!Graph (

			type <- 'digraph',

			name <- 'KM3 Model in DOT',

			rankDir <- thisModule.RankingDirection(),

			labeljust <- thisModule.LabelJustification(),

			labelloc <- thisModule.LabelLocation(),

			compound <- true,

			concentrate <- thisModule.DiagramMode('Generalization') and 

			not thisModule.Invisible(),

			nodeSeparation <- thisModule.MinimumNodeSeparation(),

			nodes <- m.contents

		)

}



	
	
	
	
	
rule Package {

	from

		p: KM3!Package

	to

		out: DOT!SubGraph (

			name <- 'cluster_' + p.name,

			label <- SubGraphLabel,

			color <- 'black',

			labelloc <- thisModule.LabelLocation(),

			nodes <- p.contents

		),

		SubGraphLabel: DOT!SimpleLabel (

			content <- p.name

		)

}



	
	
rule Datatypes {

	from

		d: KM3!DataType

	to

		out: DOT!Node (

			name <- d.name,

			shape <- NodeShape

		),

		NodeShape: DOT!RecordNodeShape (

			name <- 'record',

			label <- NodeLabel

		),

		NodeLabel: DOT!SimpleLabel (

			content <- '{' + d.getDataTypeHead() +  '|' + '}'	

		)

}



	
	
	
rule ClassWithSupertypesGeneralizationsDrawn2Node {

	from

		c: KM3!Class (

			not(c.supertypes->oclIsUndefined())	and 

			(thisModule.Invisible() or 

			(thisModule.DiagramMode('Generalization') or 

			thisModule.DiagramMode('All')))

		)

	to

		out: DOT!Node (

			name <- c.name,

			shape <- nodeShape,

			refers <- Sequence {c.structuralFeatures->select( e |

					e.oclIsKindOf(KM3!Reference))}->append(supertypeClasses)

		),

		nodeShape: DOT!RecordNodeShape (

			name <- 'record',

			label <- NodeLabel

		),

		NodeLabel : DOT!SimpleLabel (

			content <- c.getLabel()	

		),

		supertypeClasses: distinct DOT!DirectedArc 

		foreach(super in c.supertypes) (

			constraint <- (thisModule.DiagramType() = 'Generalization' or

				thisModule.DiagramType() = 'None'),

			style <- if thisModule.DiagramMode('Generalization') or 

			thisModule.DiagramMode('All') then 'none' else 'invis' endif,

			fromNode <- c,

			toNode <- super,

			group <- super.name,

			minlen <- thisModule.MinimumArcLength(),

			arrowHead <- arrowHeadShape

		),

		arrowHeadShape: distinct DOT!ArrowShape 

		foreach(super in c.supertypes) (

			name <- 'normal',

			isPlain <- true

		)

}



	
	
	
	
rule ClassWithSupertypesGeneralizationsNotDrawn2Node {

	from

		c: KM3!Class (

			c.supertypes->oclIsUndefined() or

			(not(c.supertypes->oclIsUndefined()) and 

			(thisModule.Invisible() or 

			not(thisModule.DiagramMode('Generalization') or 

			thisModule.DiagramMode('All'))))

		)

	to

		out: DOT!Node (

			name <- c.name,

			shape <- nodeShape,

			refers <- Sequence {c.structuralFeatures->select( e |

					e.oclIsKindOf(KM3!Reference))}

		),

		nodeShape: DOT!RecordNodeShape (

			name <- 'record',

			label <- NodeLabel

		),

		NodeLabel : DOT!SimpleLabel (

			content <- c.getLabel()	

		)

}



	
	
	
	
rule Reference2OneWayArc {

	from

		r: KM3!Reference (

			r.opposite.oclIsUndefined()	and 

			(thisModule.Invisible() or 

			(if r.isContainer then

				thisModule.DiagramMode('Composition')

			else thisModule.DiagramMode('Reference') 

			endif or 

			thisModule.DiagramMode('All')))

		)

	to

		out: DOT!DirectedArc (

			fromNode <- r.owner,

			toNode <- r.type,

			arrowHead <- arrowHeadShape,

			arrowTail <- arrowTailShape,

			group <- r.type.name,

			style <- if thisModule.DiagramMode('All') or

			thisModule.DiagramMode('Reference') then 'none' else

				if thisModule.DiagramMode('Composition') and

				r.isContainer then 'none' else

				'invis' endif endif,

			minlen <- thisModule.MinimumArcLength(),

			headlabel <- ArcHeadLabel,

			constraint <- (r.isContainer 

				and (thisModule.DiagramType() = 'Composition' or

				thisModule.DiagramType() = 'None'))

		),

		ArcHeadLabel : DOT!SimpleLabel (

			content <-  r.name + r.getMultiplicity() + if r.isOrdered then

					'{ordered}'

				else

					''

				endif

		),

		arrowHeadShape: DOT!ArrowShape (

			name <- 'vee',

			isPlain <- false,

			clipping <- 'none'

		),

		arrowTailShape: DOT!ArrowShape (

			name <- if r.isContainer then 'diamond' else 'none' endif,

			isPlain <- false,

			clipping <- 'none'

		)

}



	
	
	
rule Reference2Arc {

	from

		r: KM3!Reference (

			if not(r.opposite.oclIsUndefined()) then

				thisModule.relationsList->includes(

					Tuple{ref = r, opposite = r.opposite}) and

					(thisModule.Invisible() or 

					(if r.isContainer or r.opposite.isContainer then

						thisModule.DiagramMode('Composition')

					else

						thisModule.DiagramMode('Reference')

					endif

					or thisModule.DiagramMode('All')))

			else

				false

			endif

		)

	to

		out: DOT!DirectedArc (

			fromNode <- r.owner,

			toNode <- r.type,

			group <- r.type.name,

			minlen <- thisModule.MinimumArcLength(),

			arrowHead <- arrowHeadShape,

			arrowTail <- arrowTailShape,

			taillabel <- ArcTailLabel,

			style <- if thisModule.DiagramMode('All') or

			thisModule.DiagramMode('Reference') then 'none' else

				if thisModule.DiagramMode('Composition') 

				and (r.isContainer or r.opposite.isContainer) then 'none' else

				'invis' endif endif,

			constraint <- ((r.isContainer or r.opposite.isContainer) and 

				(thisModule.DiagramType() = 'Composition' or

				thisModule.DiagramType() = 'None')),

			headlabel <- ArcHeadLabel

		),

		ArcHeadLabel : DOT!SimpleLabel (

			content <- r.name + r.getMultiplicity() + if r.isOrdered then

					'{ordered}'

				else

					''

				endif

		),

		ArcTailLabel : DOT!SimpleLabel (

			content <- r.opposite.name + r.opposite.getMultiplicity() + 

				if r.opposite.isOrdered then

					'{ordered}'

				else

					''

				endif	

		),

		arrowHeadShape: DOT!ArrowShape (

			name <- if r.opposite.isContainer then 'diamond' else 'none' endif,

			isPlain <- false,

			clipping <- 'none'

		),

		arrowTailShape: DOT!ArrowShape (

			name <- if r.isContainer then 'diamond' else 'none' endif,

			isPlain <- false,

			clipping <- 'none'

		)

}



