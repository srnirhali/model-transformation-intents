

module Table2HTML; 
create OUT : HTML from IN : Table;



helper def : allValidTables : Sequence(Table!Table) =

	Table!Table.allInstances()->

		select(table|table.rows->first().cells->first().content <> 'Bar Chart')->

			select(table|table.rows->first().cells->first().content <> 'Pie Chart')->

				asSet()->sortedBy(table|table.rows->first().cells->first().content);



helper context Table!Cell def : roundValue() : String =

	let point : Integer = self.content->indexOf('.') in

		if point > 0

			then self.content->substring(1,point+2)

			else self.content

		endif;



entrypoint rule HTML() {

	using {

		metamodelTables : Sequence(Table!Table) = thisModule.allValidTables->select(table|table.rows->first().cells->first().content = 'Metamodel');

	}

	to

		h:HTML!HTML (

			head <- head,

			body <- body

		),

		head:HTML!HEAD (

			headElements <- title

		),

		title:HTML!TITLE (

			value <-	if metamodelTables->notEmpty()

								then	if metamodelTables->first().rows->size() = 2

												then metamodelTables->first().rows->at(2).cells->first().content

												else 'Zoo'

											endif

								else ''

							endif

		),

		body:HTML!BODY (

			bodyElements <- thisModule.allValidTables->iterate(table; acc:Sequence(HTML!TABLE)=Sequence{}|

				acc->including(thisModule.Table2TABLE(table)))

		)

}



lazy rule Table2TABLE {

	from

		tab:Table!Table

	to

		table:HTML!TABLE (

			border <- '1',

			trs <- firstRow,

			trs <- tab.rows->subSequence(2,tab.rows->size())->iterate(row; acc:Sequence(HTML!TR)=Sequence{}|

				acc->including(thisModule.Row2TR(row)))

		),

		firstRow:HTML!TR (

			tds <- tab.rows->first().cells->iterate(cell; acc:Sequence(HTML!TH)=Sequence{}|

				acc->including(thisModule.Cell2TH(cell)))

		)

}



lazy rule Cell2TH {

	from

		cell:Table!Cell

	to

		th:HTML!TH (

			value <- cell.roundValue()

		)

}



lazy rule Row2TR {

	from

		row:Table!Row

	to

		tr:HTML!TR (

			tds <- row.cells->iterate(cell; acc:Sequence(HTML!TD)=Sequence{}|

				acc->including(thisModule.Cell2TD(cell)))

		)

}



lazy rule Cell2TD {

	from

		cell:Table!Cell

	to

		td:HTML!TD (

			value <- cell.roundValue()

		)

}

