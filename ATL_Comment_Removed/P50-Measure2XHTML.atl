

module Measure2XHTML; 
create OUT : XHTML from IN : Measure;



uses MeasureHelpers;



helper def : useCSSFile : Boolean = false;



helper def : useJSFile : Boolean = false;



helper def : metricDefLocation : String =

	'http://www.mdworkbench.com/measurement/metrics/definition.htm';



helper def : modelKind : Map(String,String) =

	Map {('KM3','KM3'),

		('UML2','UML2')};



helper def : elementKind : Map(String,String) =

	Map {('metamodel','Metamodel'),

		('model','Model'),

		('package','Package'),

		('interface','Interface'),

		('class','Class')};



helper def : html : XHTML!HTML = OclUndefined;



rule RootMeasureSet {

	from

		root : Measure!RootMeasureSet

	using {

		allMetamodelMeasuresSets : Sequence(Measure!MeasureSet) =

			thisModule.allMeasureSets(#metamodel);

		allModelMeasuresSets : Sequence(Measure!MeasureSet) =

			thisModule.allMeasureSets(#model);

		allPackageMeasuresSets : Sequence(Measure!MeasureSet) =

			thisModule.allMeasureSets(#package);

		allInterfaceMeasuresSets : Sequence(Measure!MeasureSet) =

			thisModule.allMeasureSets(#interface);

		allClassMeasuresSets : Sequence(Measure!MeasureSet) =

			thisModule.allMeasureSets(#class);

	}

	do {		

		if (not (allMetamodelMeasuresSets->isEmpty() and

			allModelMeasuresSets->isEmpty() and

				allPackageMeasuresSets->isEmpty() and

					allInterfaceMeasuresSets->isEmpty() and

						allClassMeasuresSets->isEmpty())) {

			thisModule.html <- thisModule.HTML();

		

			for (cat in root.categories) {

				if (allMetamodelMeasuresSets->notEmpty()) {

					if (allMetamodelMeasuresSets->

							first().categories()->includes(cat)) {

						thisModule.html.body.blocks->last().flows <-

							thisModule.TABLE(allMetamodelMeasuresSets,cat);

					}

				}

				if (allModelMeasuresSets->notEmpty()) {

					if (allModelMeasuresSets->

							first().categories()->includes(cat)) {

						thisModule.html.body.blocks->last().flows <-

							thisModule.TABLE(allModelMeasuresSets,cat);

					}

				}

				if (allPackageMeasuresSets->notEmpty()) {

					if (allPackageMeasuresSets->

							first().categories()->includes(cat)) {

						thisModule.html.body.blocks->last().flows <-

							thisModule.TABLE(allPackageMeasuresSets,cat);

					}

				}

				if (allInterfaceMeasuresSets->notEmpty()) {

					if (allInterfaceMeasuresSets->

							first().categories()->includes(cat)) {

						thisModule.html.body.blocks->last().flows <-

							thisModule.TABLE(allInterfaceMeasuresSets,cat);

					}

				}

				if (allClassMeasuresSets->notEmpty()) {

					if (allClassMeasuresSets->

							first().categories()->includes(cat)) {

						thisModule.html.body.blocks->last().flows <-

							thisModule.TABLE(allClassMeasuresSets,cat);

					}

				}

			}

		}

	}

}



rule HTML() {

	to

		html : XHTML!HTML (

            xmllang <- xmllang,

			head <- head,

			body <- body

		),

		xmllang : XHTML!LanguageCode (

			value <- 'en-US'

		),

		head : XHTML!HEAD (

			title <- title,

			headMiscs <- meta,

			headMiscs <-

				if (thisModule.useCSSFile)

					then thisModule.LINK()

					else thisModule.STYLE()

				endif,

			headMiscs <-

				if (thisModule.useJSFile)

					then thisModule.SCRIPT()

					else thisModule.EmbeddedSCRIPT()

				endif,

			headMiscs <- thisModule.NOSCRIPT()

        ),

        title : XHTML!TITLE (

            pcdata <- thisModule.PCDATA('Interactive metric report on a ' +

            	thisModule.getModelKind() + ' model')

        ),

        meta : XHTML!META (

            httpequiv <- thisModule.CDATA('Content-Type'),

            content <- thisModule.CDATA('text/html; charset=utf-8')

        ),

		body : XHTML!BODY (

			blocks <- thisModule.HowToDIV()

		)

	do {			

		html;

	}

}



rule LINK() {	

	to

		link : XHTML!LINK (

			href <- href,

			type <- type,

			rel <- rel

		),

		href : XHTML!URI (

			value <- 'stylesheet.css'

		),

		type : XHTML!ContentType (

			value <- 'text/css'

		),

		rel : XHTML!LinkTypes (

			value <- 'stylesheet'

		)

	do {

		link;

	}

}



rule STYLE() {	

	to

		style : XHTML!STYLE (

			type <- type,

			pcdata <- thisModule.PCDATA(thisModule.getStyleSheet())

		),

		type : XHTML!ContentType (

			value <- 'text/css'

		)

	do {

		style;

	}

}



rule SCRIPT() {	

	to

		script : XHTML!SCRIPT (

			type <- type,

			src <- src

		),

		type : XHTML!ContentType (

			value <- 'text/javascript'

		),

		src : XHTML!URI (

			value <- 'script.js'

		)

	do {		

		script;

	}

}



rule EmbeddedSCRIPT() {	

	to

		embeddedScript : XHTML!SCRIPT (

			type <- type,

			pcdata <- thisModule.PCDATA(thisModule.getJavaScript())

		),

		type : XHTML!ContentType (

			value <- 'text/javascript'

		)

	do {		

		embeddedScript;

	}

}



rule NOSCRIPT() { 

    to

        noscript : XHTML!NOSCRIPT (

            blocks <- fieldset

        ),

        fieldset : XHTML!FIELDSET (

            fieldsetElements <- legend, 

            fieldsetElements <- p

        ),

        legend : XHTML!LEGEND (

            inlines <- thisModule.PCDATA('Warning')

        ),

        p : XHTML!P (

            inlines <- thisModule.PCDATA('In order to use the interactive features, you must enable JavaScript in your browser.')

        )

    do {        

        noscript;

    }

}



rule ACRONYM(value : String, title : String) {

	to

		acronym : XHTML!ACRONYM (

			title <- titleText,

			inlines <- thisModule.PCDATA(value)

		),

		titleText : XHTML!Text (

			value <- title

		)

	do {

		acronym;

	}

}



rule LI(text : String) {

    to

        li : XHTML!LI (

            flows <- thisModule.PCDATA(text)

        )

    do {

        li;

    }

}



rule BR() {

    to

        br : XHTML!BR

    do {

        br;

    }

}



rule HowToDIV() {

    to

        howtoDiv : XHTML!DIV (

            flows <- fieldset,

            flows <- thisModule.BR(),

            flows <- thisModule.BR()

        ),

        fieldset : XHTML!FIELDSET (

            fieldsetElements <- legend, 

            fieldsetElements <- p1,

            fieldsetElements <- p2,

            fieldsetElements <- operatorsUl,

            fieldsetElements <- p3,

            fieldsetElements <- p4,

            fieldsetElements <- samplesUl

        ),

        legend : XHTML!LEGEND (

            inlines <- thisModule.PCDATA('How To')

        ),

        p1 : XHTML!P (

            inlines <- thisModule.PCDATA('A predicate can be set for each metric column (an operator followed by a number).' +

                     ' The values for the metric that respect the given predicate are emphasized.')

        ),

        p2 : XHTML!P (

            inlines <- thisModule.PCDATA('Operators for the predicate are among:')

        ),

        operatorsUl : XHTML!UL (

            lis <- thisModule.LI('lower than (&lt;)'),

            lis <- thisModule.LI('lower or equal than (&lt;=)'),

            lis <- thisModule.LI('equal to (= or ==)'),

            lis <- thisModule.LI('not equal to (!= or !)'),

            lis <- thisModule.LI('greater or equal than (&gt;)'),

            lis <- thisModule.LI('greater than (&gt;=)')

        ),

        p3 : XHTML!P (

            inlines <- thisModule.PCDATA('Unit for percentage values are not necessary.' +

                     ' If no operator is given, the operator lower or equal than (&lt;=) is used.' +

                     ' If the predicate is incorrect, no value is emphasized.')

        ),

        p4 : XHTML!P (

            inlines <- thisModule.PCDATA('Predicate samples:')

        ),

        samplesUl : XHTML!UL (

            lis <- thisModule.LI('&gt;1'),

            lis <- thisModule.LI('=33.3')

        )

    do {

        howtoDiv;

    }

}



rule TABLE(allMeasSet : Sequence(Measure!MeasureSet), cat : Measure!Category) {

	to

		table : XHTML!TABLE (

			caption <- caption,

			thead <- thead,

			tfoot <- tfoot,

			tableElements <- tbody

		),

		caption : XHTML!CAPTION (

			inlines <- thisModule.PCDATA(cat.desc + ' on ' +

                allMeasSet->first().getElementKind() + ' elements')

		),

		thead : XHTML!THEAD (

			trs <-thisModule.FirstHeaderRow(cat,

				allMeasSet->first().allMeasures(cat)->size()),

			trs <-thisModule.HeaderRow(allMeasSet->first(),cat)

		),

		tfoot : XHTML!TFOOT (

			trs <-thisModule.HeaderRow(allMeasSet->first(),cat)

		),

		tbody : XHTML!TBODY (

			trs <-thisModule.InputTextRow(allMeasSet->

				first().allMeasures(cat)),

			trs <-allMeasSet->

				collect(ms|thisModule.DataRow(ms,cat))

		)

	do {

		table;

	}

}



rule FirstHeaderRow(cat : Measure!Category, colspan : Integer) {

	to

		tr : XHTML!TR (

			trElements <- emptyTh,

			trElements <- th			

		),

		emptyTh : XHTML!TH (

			class <- thisModule.CDATA('empty')

		),

		th : XHTML!TH (

			class <- thisModule.CDATA('category'),

			colspan <- colspanNumber,

			flows <- a

		),

		colspanNumber : XHTML!Number (

			value <- colspan.toString()

		),

		a : XHTML!A (

			href <- href,

			onclick <- onclick,

			aContents <- thisModule.ACRONYM(cat.name,cat.desc)

		),

		href : XHTML!URI (

			value <- thisModule.metricDefLocation + '#' + cat.name  +

				'4' + thisModule.getModelKind()

		),

		onclick : XHTML!Script (

			value <- 'window.open(this.href,"_blank"); return false;'

		)

	do {

		tr;

	}

}



lazy rule HeaderRow {

	from

		ms : Measure!MeasureSet,

		cat : Measure!Category

	to

		tr : XHTML!TR (

			trElements <- thisModule.FirstHeaderCell(ms.getElementKind()),

			trElements <- ms.allMeasures(cat)->

				collect(meas|thisModule.HeaderCell(meas.metric))

		)

}



rule FirstHeaderCell(elementType : String) {

	to

		th : XHTML!TH (

			class <- thisModule.CDATA('element'),

			flows <- thisModule.PCDATA(elementType)

		)

	do {

		th;

	}

}



lazy rule HeaderCell {

	from

		metric : Measure!Metric

	to

		th : XHTML!TH (

			class <- thisModule.CDATA('metric'),

			flows <- a

		),

		a : XHTML!A (

			href <- href,

			onclick <- onclick,

			aContents <- thisModule.ACRONYM(metric.name,metric.desc)

		),

		href : XHTML!URI (

			value <- thisModule.metricDefLocation +

				'#' + metric.category.name + '4' + thisModule.getModelKind() +

				'::' + metric.name

		),

		onclick : XHTML!Script (

			value <- 'window.open(this.href,"_blank"); return false;'

		)

}



rule InputTextRow(allMeas : Sequence(Measure!Measure)) {

	to

		tr : XHTML!TR (

			class <- thisModule.CDATA('bound'),

			trElements <- firstTh

		),

		firstTh : XHTML!TH

	do {

		for (meas in allMeas) {

			tr.trElements <- thisModule.InputTextCell(meas);

		}

		

		tr;

	}

}



rule InputTextCell(meas : Measure!Measure) {

	to

		th : XHTML!TH (

			flows <- inputText

		),

		inputText : XHTML!INPUT (

			type <- #text,

			size <- thisModule.CDATA('3'),

			maxlength <- thisModule.CDATA('7'),

			value <- thisModule.CDATA(meas.metric.preferredValue),

			onchange <- onchange,

			onkeypress <- onkeypress

		),

		onchange : XHTML!Script (

			value <- 'changeStyle(this);'

		),

		onkeypress : XHTML!Script (

			value <- 'changeStyleOnEnter(event,this);'

		)

	do {

		th;

	}

}



lazy rule DataRow {

	from

		ms : Measure!MeasureSet,

		cat : Measure!Category

	to

		tr : XHTML!TR (

			trElements <- thisModule.FirstDataCell(ms.absoluteName()),

			trElements <- ms.allMeasures(cat)->

				collect(meas|thisModule.DataCell(meas))

		)

}



rule FirstDataCell(elementName : String) {

	to

		td : XHTML!TD (

			class <- thisModule.CDATA('first'),

			flows <- thisModule.PCDATA(elementName)

		)

	do {

		td;

	}

}



lazy rule DataCell {

	from

		meas : Measure!Measure

	to

		td : XHTML!TD (

			flows <- thisModule.PCDATA(meas.stringValue())

		)

	do {

		if (not meas.matchPreferredValue()) {

			td.class <- thisModule.CDATA('ignoredValue');

		}

		

		td;

	}

}



rule CDATA(value : String) {

    to

		cdata : XHTML!CDATA (

            value <- value

        )

    do {

        cdata;

    }

}



rule PCDATA(value : String) {

    to

        pcdata : XHTML!PCDATA (

            inlines <- thisModule.CDATA(value)

        )

    do {

        pcdata;

    }

}



helper def : getStyleSheet() : String = '

<!
html

{

    font-family: arial,helvetica,sans-serif;

    font-size: small;

    font-style: normal;

    font-weight: normal;

    text-align: justify;

}



fieldset

{

    padding: 0px 10px 0px 10px;

}



legend

{

    font-weight: bold;

}



caption

{

    font-style: italic;

    font-weight: bold;

    margin-left: auto;

    margin-right: auto;

    padding-bottom: 5px;

}



table

{

    border: none;

    border-collapse: collapse;

    margin: 5px auto 40px auto;

}



tr.bound, th.metric, th.element

{

    background: #c8c8ff;

    text-align: center;

}



th

{

    border: 1px solid black;

    padding: 1px 4px 4px 4px;

    text-align: center;

    white-space: nowrap;

}



th.empty

{

    border: none;

}



th.category

{

    background: #9696ff;

}



acronym

{

    border-bottom: 1px dotted;

}



input

{

    border: 1px solid gray;

    padding-right: 2px;

    text-align: right;

}



td

{

    background: #e5e5ef;

    border: 1px solid black;

    color: #0000ff;

    font-family: courier,monospace;

    padding: 2px 5px 2px 5px;

    text-align: right;

    white-space: nowrap;

}



td.first

{

    color: #000000;

    font-family: arial,helvetica,sans-serif;

    text-align: left;

}



td.ignoredValue

{

    background: #ffffff;

    color: #adadad;

    text-align: right;

}



a

{

    color: blue;

    text-decoration: none;

}



a:hover

{

    text-decoration: underline;

}

/*]]>*/
';



helper def : getJavaScript() : String =	'

<!
function indexOf(node, item)

{

  var index = 0;

  var current = first_child(node);

  

  while (current != null)

  {

    if (current == item)

    {

      return index;

    }

    else

    {

      current = node_after(current);

      index++;

    }

  }

  

  return 0;

}



function at(node, index)

{

  var i = 0;

  var current = first_child(node);

  

  while (current != null)

  {

    if (i == index)

    {

      return current;

    }

    else

    {

      current = node_after(current);

      i++;

    }

  }

  

  return current;

}



function matchPreferredValue(rawValue, inputText)

{    

  var result = false;

  var value = parseFloat(rawValue);

  

  if (inputText.value.substring(0,2) == "<=")

  {

    result = (value <= parseFloat(inputText.value.substring(2,inputText.value.length)));

  }

  else if (inputText.value.substring(0,2) == ">=")

  {

    result = (value >= parseFloat(inputText.value.substring(2,inputText.value.length)));

  }

  else if (inputText.value.substring(0,2) == "==")

  {

    result = (value == parseFloat(inputText.value.substring(2,inputText.value.length)));

  }

  else if (inputText.value.substring(0,2) == "!=")

  {

    result = (value != parseFloat(inputText.value.substring(2,inputText.value.length)));

  }

  else if (inputText.value.substring(0,1) == "<")

  {

    result = (value < parseFloat(inputText.value.substring(1,inputText.value.length)));

  }

  else if (inputText.value.substring(0,1) == ">")

  {

    result = (value > parseFloat(inputText.value.substring(1,inputText.value.length)));

  }

  else if (inputText.value.substring(0,1) == "=")

  {

    result = (value == parseFloat(inputText.value.substring(1,inputText.value.length)));

  } 

  else if (inputText.value.substring(0,1) == "!")

  {

    result = (value != parseFloat(inputText.value.substring(1,inputText.value.length)));

    }

  else

  {

    result = (value <= parseFloat(inputText.value));

    if (inputText.value != "")

    {

      inputText.value = "<=" + inputText.value

    }

  }

  

  return result;

}function changeStyleOnEnter(event, inputText)

{

  if (event.keyCode == 13)

  {

  	changeStyle(inputText);

  }

}



function changeStyle(inputText)

{

  var tdInputText = inputText.parentNode;

  var index = indexOf(tdInputText.parentNode,tdInputText);

     

  if (index != -1)

  {

    for (var trValue = node_after(tdInputText.parentNode); trValue != null; trValue = node_after(trValue))

    {

      var tdValue = at(trValue,index)

    

      if (matchPreferredValue(tdValue.innerHTML,inputText))

      {

        tdValue.className = "";

      }

      else

      {

        tdValue.className = "ignoredValue";

      }

    }

  }

}



function is_all_ws(nod)

{

  return !(/[^\\t\\n\\r ]/.test(nod.data));

}



function is_ignorable(nod)

{

  return (nod.nodeType == 8) ||

         ((nod.nodeType == 3) && is_all_ws(nod));

}

function node_after(sib)

{

  while ((sib = sib.nextSibling)) {

    if (!is_ignorable(sib)) return sib;

  }

  return null;

}

function first_child(par)

{

  var res=par.firstChild;

  while (res) {

    if (!is_ignorable(res)) return res;

    res = res.nextSibling;

  }

  return null;

}

//
';

