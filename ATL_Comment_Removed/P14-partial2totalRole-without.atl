

module Replace; 
create OUT : KM3target from IN : KM3;



rule Metamodel {

	from

		inputMm:KM3!Metamodel

	to

		outputMm:KM3target!Metamodel (

			location <- inputMm.location,

			contents <- inputMm.contents

		)

}



rule Package {

	from

		inputPkg:KM3!Package

	to

		outputPkg:KM3target!Package (

			name <- inputPkg.name,

			contents <- inputPkg.contents

		)

}



rule ClassWithPartialOrder {

	from

		inputClass:KM3!Class (

			not(inputClass.structuralFeatures->select(r|(r.upper=1)and(r.lower=0))->isEmpty())	

		)

		

	to

		outputClass:KM3target!Class (

			name <- inputClass.name,

			isAbstract <- inputClass.isAbstract,

			structuralFeatures <- inputClass.structuralFeatures,

			supertypes <- inputClass.supertypes

		),

		totalOrderClass : KM3target!Class (

			name <- inputClass.name+'TotalOrder',

			isAbstract <- true,

			package <- inputClass.package,

			supertypes <- inputClass.structuralFeatures->iterate(a;acc:Sequence(KM3!Class)=Sequence{}|

																	acc->including(a.opposite.owner))	

		)

}



rule ClassWithoutPartialOrder {

	from

		inputClass:KM3!Class (

			inputClass.structuralFeatures->select(r|(r.upper=1)and(r.lower=0))->isEmpty()

		)

		

	to

		outputClass:KM3target!Class (

			name <- inputClass.name,

			isAbstract <- inputClass.isAbstract,

			structuralFeatures <- inputClass.structuralFeatures,

			supertypes <- inputClass.supertypes

		)

}



rule referencePartialOrder {

	from 

		inputRef : KM3!Reference (

			inputRef.upper = 1 and inputRef.lower = 0

		)

	to

		outputRef : KM3target!Reference (

			name <- inputRef.opposite.owner.name+'TotalOrder',

			isOrdered <- inputRef.isOrdered,

			isUnique <- inputRef.isUnique,

			location <- inputRef.location,

			lower <- 1,

			upper <- 1,

			type <- KM3target!Class.allInstances()->select(a|a.name=inputRef.owner.name+'TotalOrder')->asSequence()->first(),

			owner <- inputRef.owner,

			opposite <- inputRef.opposite

		),

		outputOppositeRef : KM3target!Reference (

			name <- inputRef.opposite.owner.name+'OppositeTotalOrder',

			isOrdered <- inputRef.opposite.isOrdered,

			isUnique <- inputRef.opposite.isUnique,

			location <- inputRef.opposite.location,

			lower <- 1,

			upper <- 1,

			type <- inputRef.opposite.type,

			owner <- KM3target!Class.allInstances()->select(a|a.name=inputRef.owner.name+'TotalOrder')->asSequence()->first(),

			opposite <- outputRef

		)

}

