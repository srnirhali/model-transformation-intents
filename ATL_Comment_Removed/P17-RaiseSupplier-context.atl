

module RaiseSupplier; 
create OUT : KM3 from IN : KM3;



helper context KM3!Class def: getRootSuperTypes : Sequence(KM3!Class) =

	if self.supertypes->isEmpty()

		then Sequence{}	

	else 		self.supertypes->select(c | c.supertypes->notEmpty())

					->iterate(a; acc : Sequence(KM3!Class)=Sequence{} |acc->including(a.getRootSuperTypes))

					->union(

					self.supertypes->select(c | c.supertypes->isEmpty())

					->iterate(a; acc : Sequence(KM3!Class)=Sequence{} | acc->including(a) )

			).flatten()

	endif;

	







rule Metamodel {

	from

		inputMm:KM3!Metamodel

	to

		outputMm:KM3!Metamodel (

			location <- inputMm.location,

			contents <- inputMm.contents

		)

}



rule Package {

	from

		inputPkg:KM3!Package

	to

		outputPkg:KM3!Package (

			name <- inputPkg.name,

			contents <- inputPkg.contents

		)

}



rule DataType {

	from

		inputData:KM3!DataType

	to

		outputData:KM3!DataType(

			name <- inputData.name,

			location <- inputData.location

		)

}



rule EnumLiteral {

	from

		inputL:KM3!EnumLiteral

	to

		outputL:KM3!EnumLiteral (

			name <- inputL.name,

			location <- inputL.location,

			enum  <- inputL.enum,

			package <- inputL.package

		)

}



rule Enumeration {

	from

		inputEnum:KM3!Enumeration

	to

		outputEnum:KM3!Enumeration (

			name <- inputEnum.name,

			location <- inputEnum.location,

			package <- inputEnum.package,

			literals <- inputEnum.literals

		)

}



rule Class {

	from

		inputC:KM3!Class

			to

		outputC:KM3!Class (

			isAbstract <- inputC.isAbstract,

			supertypes <- inputC.supertypes,

			name <- inputC.name,

			location <- inputC.location,

			package <- inputC.package,

			structuralFeatures <- inputC.structuralFeatures->

				select(r | r.oclIsTypeOf(KM3!Reference))->select(r | r.opposite.oclIsUndefined())->

				iterate(a;acc : Sequence(KM3!Reference) = Sequence{} | 

					if a.type.oclIsTypeOf(KM3!Class)

						then acc->append(a.type.getRootSuperTypes->iterate(b; acc1:Sequence(KM3!Reference) = Sequence{}|

							acc1->append(thisModule.InheritAndAssociation(b,a))))->flatten()

						else acc

						endif),

			structuralFeatures <- inputC.structuralFeatures

				->select(r | r.oclIsTypeOf(KM3!Reference))

				->select(r | not r.opposite.oclIsUndefined()),

			structuralFeatures <- inputC.structuralFeatures

				->select(r | not r.oclIsTypeOf(KM3!Reference))

		)

}







rule Attribute {

	from

		inputAttr : KM3!Attribute

	to

		outputAttr : KM3!Attribute (

			package <- inputAttr.package,

			name <- inputAttr.name,

			lower <- inputAttr.lower,

			upper <- inputAttr.upper,

			isOrdered <- inputAttr.isOrdered,

			isUnique <- inputAttr.isUnique,

			owner <- inputAttr.owner,

			type <- inputAttr.type

		)

}



rule ReferenceWithOpposite {

	from

		inputRef : KM3!Reference

		(not inputRef.opposite.oclIsUndefined())

	to

		outputRef : KM3!Reference (

			package <- inputRef.package,

			name <- inputRef.name,

			lower <- inputRef.lower,

			upper <- inputRef.upper,

			isOrdered <- inputRef.isOrdered,

			isUnique <- inputRef.isUnique,

			owner <- inputRef.owner,

			type <- inputRef.type,

			isContainer <- inputRef.isContainer,

			opposite <- inputRef.opposite

		)

}



lazy rule InheritAndAssociation{

	from

		supertype:KM3!Class,

		reference:KM3!Reference

		

	to

		refChildren : KM3!Reference (

			package <- reference.package,

			name <- reference.name,

			lower <- reference.lower,

			upper <- reference.upper,

			isOrdered <- reference.isOrdered,

			isUnique <- reference.isUnique,

			owner <- reference.owner,

			type <- supertype,

			isContainer <- reference.isContainer

		)

}

