

module DSL2KM3;

create OUT : KM3 from IN : DSL;





helper context DSL!Relationship def: needTurnOnClass() : Boolean =

	let cond : Boolean =

	DSL!Role.allInstances()->iterate(e; acc : Boolean = false |

		acc or (e.type = self or e.source = self))	

		in (cond or

			(not self.properties.isEmpty()

		or (not self.superType.oclIsUndefined()

		or not self.subTypes.isEmpty())));



helper def: getRoles(c : DSL!Class) : Sequence(DSL!Role) =

    DSL!Role.allInstances()->select(e | e.source = c 

	   	and e.relation.properties.isEmpty() 

		and e.relation.superType.oclIsUndefined()

		and	e.relation.subTypes.isEmpty());



helper context DSL!Role def: isEmbedding() : Boolean =

    let a : DSL!Role = self.relation.roles.first()

	in if self = a then a.relation.isEmbedding

	else false endif;





rule Metamodel {

	from 

		e : DSL!DomainModel	

	to

		a : KM3!Metamodel(

			contents <- Sequence{b, c}

		),

		b : KM3!Package (

			name <- e.name,

			contents <-

				Sequence{

					e.classifiers

						->select(a |

							a.oclIsTypeOf(DSL!Class) or

							if a.oclIsTypeOf(DSL!Relationship)

							then

								a.needTurnOnClass()

							else

								false

							endif

						),

					e.types

						->select(a | a.oclIsTypeOf(DSL!Enumeration))

				}

			),

		c : KM3!Package (

			name <- 'PrimitiveTypes',

			contents <- e.types->select(a | a.oclIsTypeOf(DSL!SimpleType))

		)		

}



rule Class {

	from 

		e : DSL!Class

	to

		a : KM3!Class(

			name<-e.name,

			isAbstract <- e.isAbstract,

			structuralFeatures<-Set{

				e.properties -> select (c | c.oclIsTypeOf(DSL!ValueProperty) ),			

				thisModule.getRoles(e)

			},

			supertypes <- Set{e.superType}		

		)

}



rule Relation2Class {

	from 

	e : DSL!Relationship(

			e.needTurnOnClass()

		)

	to

	a : KM3!Class(

		name<-e.name,

		isAbstract <- e.isAbstract,

		structuralFeatures<- Set{ 

			e.properties -> select (c | c.oclIsTypeOf(DSL!ValueProperty)),			

			e.roles->first()

		},

		supertypes <- Set{e.superType}

	)

}



rule SimpleReference {

	from

		r : DSL!Role(

			not r.relation.needTurnOnClass()

		)

	to

		rf : KM3!Reference (

			name <- r.name,

			type <- r.type,

			lower <- r.min,

			upper <- if r.max=0 then 0-1 else 1 endif,

			isOrdered <- r.isOrdered,

			owner <- r.source,

			isContainer <- r.isEmbedding(),

			opposite <- r.relation.roles->select(e | e <> r)->first(),

			isUnique <- false

		)

}



rule ComplexReference {

	from

		r : DSL!Role (

			r.relation.needTurnOnClass()

		)

	using {

		oppositeRole : DSL!Role = r.relation.roles->select(e | e <> r)->first();

	}

	to		

		rfInOwner : KM3!Reference (

			name <- r.name,	

			owner <- r.source,

			type <- r.relation,

			opposite <- rfInRelationship,

			lower <- r.min,

			upper <- if r.max=0 

			then 0-1 else 1 endif,

			isOrdered <- r.isOrdered,

			isContainer <- r.isEmbedding(),

			isUnique <- false

		),

		rfInRelationship : KM3!Reference (

			name <- oppositeRole.name,

			owner <- r.relation,			

			type <- r.source,			

			opposite <- rfInOwner,

			lower <- oppositeRole.min,

			upper <- if oppositeRole.max=0 then 0-1 else 1 endif,

			isOrdered <- oppositeRole.isOrdered,

			isContainer <- oppositeRole.isEmbedding(),

			isUnique <- false

		)

}



rule Attribute {

	from

		e : DSL!ValueProperty

	to

		a : KM3!Attribute(

			name <- e.name,

			upper <- 1,

			lower <-1,

			type <- e.type,

			isUnique <- false,

			isOrdered <- false

		)

}



rule Enumeration {

	from 

		e : DSL!Enumeration

	to

		a : KM3!Enumeration(

				name <- e.name,

				literals <- e.literals -> select(a | a.oclIsTypeOf(DSL!EnumerationLiteral))

		)

}



rule EnumLiteral {

	from 

		e : DSL!EnumerationLiteral

	to

		l : KM3!EnumLiteral (

			name <- e.name

		)

}



rule DataType {

	from 

	t : DSL!SimpleType

	to

	e: KM3!DataType(name<-t.name)

}

