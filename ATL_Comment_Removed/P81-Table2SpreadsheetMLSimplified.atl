module Table2SpreadsheetMLSimplified; 
create OUT : SpreadsheetMLSimplified from IN : Table;





helper context Table!Cell def: isNumber(value : String, itIsFirstChar : Boolean) : Boolean =

	if value <> ''

	then

		let char : String =  value.substring(1,1)

		in

			if( char = '.' or char = '0' or char = '1' or char = '2' or char = '3' or char = '4' 

				or char = '5' or char = '6' or char = '7' or char = '8' or char = '9')

			then

				self.isNumber(value.substring(2,value.size()),false)

			else

				false

			endif

	else

		if itIsFirstChar

		then

			false

		else

			true

		endif

	endif;







rule Table2ExcelTable {

	from 

		t : Table!Table



	using {

		tableRow : Sequence(Table!Cell) = t.rows->first().cells;		

	}

	

	to 

		wb : SpreadsheetMLSimplified!Workbook (

			wb_worksheets <- Sequence{ws}

		),

		ws : SpreadsheetMLSimplified!Worksheet (

			name <- 'Java source code Info',

			ws_table <- et

		),

		et : SpreadsheetMLSimplified!Table (

			t_rows <- Sequence{t.rows->collect(e | thisModule.resolveTemp(e, 'erow'))},

			t_cols <- Sequence{col}

		),

		col : distinct SpreadsheetMLSimplified!Column foreach(cell in tableRow)(

			width <- 150.0

		)

}





rule Row2ExcelRow {

	from 

		row : Table!Row

	

	to

		erow : SpreadsheetMLSimplified!Row (

			r_cells <- Sequence{ row.cells->collect(e | thisModule.resolveTemp(e, 'ecell'))}

		)

}





rule Cell2ExcelCell {

	from 

		cell : Table!Cell

		

	using {

		stringTypeOrNot : Sequence(String) = 

			let ct : String = cell.content

			in

				if cell.isNumber(ct,true)

				then

					Sequence{}

				else

					Sequence{ct}

				endif;

		numberTypeOrNot : Sequence(Real) =

			let ct : String = cell.content

			in

				if cell.isNumber(ct,true)

				then

					Sequence{ct.toReal()}

				else

					Sequence{}

				endif;

	}



	to

		ecell : SpreadsheetMLSimplified!Cell (

			c_data <- edata

		),

		edata : SpreadsheetMLSimplified!Data (),

		stringVal : distinct SpreadsheetMLSimplified!StringValue foreach(stringTypeVal in stringTypeOrNot) (

			vt_data <- edata,

			value <- stringTypeVal

		),

		numberVal : distinct SpreadsheetMLSimplified!NumberValue foreach(numberTypeVal in numberTypeOrNot) (

			vt_data <- edata,

			value <- numberTypeVal

		)

}



