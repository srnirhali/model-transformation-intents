

library UML22Measure; 


helper context UML2!Class

def : coupledClasses : Set(UML2!Class) =

    self.allAttributesTypes->union(self.allParametersTypes);



helper context UML2!Class

def : newFeatures : Sequence(UML2!Feature) =

    self.newAttributes->union(self.newOperations);



helper context UML2!Class

def : definedFeatures : Sequence(UML2!Feature) =

    self.definedAttributes->union(self.definedOperations);



helper context UML2!Class

def : directlyInheritedFeatures : Sequence(UML2!Feature) =

    self.directlyInheritedAttributes->

        union(self.directlyInheritedOperations);



helper context UML2!Class

def : allInheritedFeatures : Sequence(UML2!Feature) =

    self.allInheritedAttributes->union(self.allInheritedOperations);



helper context UML2!Class

def : overriddenFeatures : Sequence(UML2!Feature) =

    self.overriddenAttributes->union(self.overriddenOperations);



helper context UML2!Class

def : allFeatures : Sequence(UML2!Feature) =

    self.allAttributes->union(self.allOperations);



helper context UML2!Class

def : newAttributes : Sequence(UML2!Property) =

    self.definedAttributes->

        select(da|self.allInheritedAttributes->

            collect(ia|ia.name)->excludes(da.name));



helper context UML2!Class

def : definedAttributes : Sequence(UML2!Property) =

    self.ownedAttribute;



helper context UML2!Package

def : definedAttributes : Sequence(UML2!Property) =

    self.allClasses->collect(c|c.definedAttributes)->flatten();



helper context UML2!Class

def : directlyInheritedAttributes : Sequence(UML2!Property) =

    self.parents->iterate(p; acc : Sequence(UML2!Property) = Sequence{}|

        acc->union(p.newAttributes));



helper context UML2!Class

def : allInheritedAttributes : Sequence(UML2!Property) =

    self.directlyInheritedAttributes->

        union(self.parents->collect(p|p.allInheritedAttributes)->flatten());



helper context UML2!Class

def : overriddenAttributes : Sequence(UML2!Property) =

    self.definedAttributes->

        select(da|self.allInheritedAttributes->

            collect(ia|ia.name)->includes(da.name));



helper context UML2!Class

def : allAttributes : Sequence(UML2!Property) =

    self.definedAttributes->union(self.allInheritedAttributes->

        reject(ia|self.overriddenAttributes->

            collect(oa|oa.name)->includes(ia.name)));



helper context UML2!Package

def : allAttributes : Sequence(UML2!Property) =

    self.allClasses->collect(c|c.allAttributes)->flatten();



helper context UML2!Class

def : allAttributesTypes : Set(UML2!Class) =

    self.allAttributes->collect(a|a.type)->flatten()->

        select(t|t.oclIsTypeOf(UML2!Class))->asSet();



helper context UML2!Class

def : newOperations : Sequence(UML2!Operation) =

    self.definedOperations->

        select(dop|self.allInheritedOperations->

            collect(iop|iop.name)->excludes(dop.name));



helper context UML2!Class

def : definedOperations : Sequence(UML2!Operation) =

    self.ownedOperation;



helper context UML2!Package

def : definedOperations : Sequence(UML2!Operation) =

    self.allClasses->collect(c|c.definedOperations)->flatten();



helper context UML2!Class

def : directlyInheritedOperations : Sequence(UML2!Operation) =

    self.parents->iterate(p; acc : Sequence(UML2!Operation) = Sequence{}|

        acc->union(p.newOperations));



helper context UML2!Class

def : allInheritedOperations : Sequence(UML2!Operation) =

    self.directlyInheritedOperations->

        union(self.parents->collect(p|p.allInheritedOperations)->flatten());



helper context UML2!Class

def : overriddenOperations : Sequence(UML2!Operation) =

    self.definedOperations->

        select(dop|self.allInheritedOperations->

            collect(iop|iop.name)->includes(dop.name));



helper context UML2!Class

def : allOperations : Sequence(UML2!Operation) =

    self.definedOperations->union(self.allInheritedOperations->

            reject(iop|self.overriddenOperations->

                collect(oop|oop.name)->includes(iop.name)));



helper context UML2!Package

def : allOperations : Sequence(UML2!Operation) =

    self.allClasses->collect(c|c.allOperations)->flatten()->asSet();



helper context UML2!Class

def : allParameters : Set(UML2!Parameter) =

    self.allOperations->collect(o|o.ownedParameter)->flatten()->

        select(t|t.oclIsTypeOf(UML2!Class))->asSet();



helper context UML2!Class

def : allParametersTypes : Set(UML2!Class) =

    self.allParameters->collect(param|param.type)->flatten()->

        select(t|t.oclIsTypeOf(UML2!Class))->asSet();



helper context UML2!Operation

def : allParametersTypes : Set(UML2!Class) =

    self.ownedParameter->collect(param|param.type)->flatten()->

        select(t|t.oclIsTypeOf(UML2!Class))->asSet();



helper context UML2!Class

def : isRoot : Boolean =

    self.parents->isEmpty();



helper context UML2!Class

def : isLeaf : Boolean =

    self.children->isEmpty();



helper context UML2!Class

def : children : Set(UML2!Class) =

    UML2!Generalization.allInstances()->

        select(g|g.general = self)->

            collect(g|g.specific)->excluding(self)->asSet();



helper context UML2!Class

def : descendants : Set(UML2!Class) =

    self.children->iterate(c; acc : Set(UML2!Class) = self.children|

        acc->union(c.descendants));



helper context UML2!Class

def : parents : Set(UML2!Class) =

    self.generalization->collect(g|g.general)->excluding(self)->asSet();



helper context UML2!Class

def : ascendants : Set(UML2!Class) =

    self.parents->iterate(c; acc: Set(UML2!Class) = self.parents|

        acc->union(c.ascendants));



helper context UML2!NamedElement

def : client : Set(UML2!NamedElement) =

    
    
    UML2!Dependency.allInstances()->

        select(d|d.supplier->includes(self))->collect(d|d.client)->

            flatten()->asSet();



helper context UML2!NamedElement

def : allClients : Set(UML2!NamedElement) =

    self.client->union(self.client->collect(ne|ne.allClients)->

        flatten())->asSet();



helper context UML2!Package

def : contents : Sequence(UML2!PackageableElement) =

    self.packagedElement;



helper context UML2!Package

def : allClasses : Sequence(UML2!Class) =

    self.contents->select(c|c.oclIsKindOf(UML2!Class));



helper context UML2!Package

def : internalBaseClasses : Set(UML2!Class) =

    self.allClasses->iterate(c; acc : Set(UML2!Class) = Set{}|

        acc->union(c.parents));



helper context UML2!Package

def : internalSupplierClasses : Set(UML2!Class) =

    self.supplierClasses(self);



helper context UML2!PackageableElement

def : owner : UML2!Package =

    let owners : Sequence(UML2!Package) =

        UML2!Package.allInstances()->select(p|p.oclIsTypeOf(UML2!Package))->

            select(p|p.contents->includes(self)) in

    if owners->notEmpty()

        then owners->first()

        else OclUndefined

    endif;



helper context UML2!Property

def : AUN() : Integer =

	self.FUN();



helper context UML2!Class

def : FCV(f : UML2!Feature) : Boolean =

	(f.visibility = #public) or

		self.allFeatures->includes(f) or

			((f.visibility = #protected) and

				self.ascendants->exists(c|c.allFeatures->includes(f)));



helper context UML2!Class

def : NAN() : Integer =

	self.newAttributes->size();



helper context UML2!Class

def : DAN() : Integer =

	self.definedAttributes->size();



helper context UML2!Class

def : IAN() : Integer =

	self.allInheritedAttributes->size();



helper context UML2!Class

def : OAN() : Integer =

	self.overriddenAttributes->size();



helper context UML2!Class

def : AAN() : Integer =

	self.allAttributes->size();



helper context UML2!Class

def : NON() : Integer =

	self.newOperations->size();



helper context UML2!Class

def : DON() : Integer =

	self.definedOperations->size();



helper context UML2!Class

def : ION() : Integer =

	self.allInheritedOperations->size();



helper context UML2!Class

def : OON() : Integer =

	self.overriddenOperations->size();



helper context UML2!Class

def : AON() : Integer =

	self.allOperations->size();



helper context UML2!Class

def : PRIAN() : Integer =

	self.allAttributes->select(a|a.visibility = #private)->size();



helper context UML2!Class

def : PROAN() : Integer =

	self.allAttributes->select(a|a.visibility = #protected)->size();



helper context UML2!Class

def : PUBAN() : Integer =

	self.allAttributes->select(a|a.visibility = #public)->size();



helper context UML2!Class

def : PRION() : Integer =

	self.allOperations->select(op|op.visibility = #private)->size();



helper context UML2!Class

def : PROON() : Integer =

	self.allOperations->select(op|op.visibility = #protected)->size();



helper context UML2!Class

def : PUBON() : Integer =

	self.allOperations->select(op|op.visibility = #public)->size();



helper context UML2!Feature

def : FUN() : Integer =

	self.allClients->size();



helper context UML2!Class

def : CHIN() : Integer =

	self.children->size();



helper context UML2!Class

def : DESN() : Integer =

	self.descendants->size();



helper context UML2!Class

def : PARN() : Integer =

	self.parents->size();



helper context UML2!Class

def : ASCN() : Integer =

	self.ascendants->size();



helper context UML2!Operation

def : OUN() : Integer =

	self.FUN();



helper context UML2!Package

def : isInternal(c : UML2!Class) : Boolean =

	self.contents->includes(c);



helper context UML2!Package

def : baseClasses(p : UML2!Package) : Set(UML2!Class) =

	self.internalBaseClasses->select(c|p.isInternal(c))->asSet();



helper context UML2!Package

def : baseClassesInPackages(p : UML2!Package) : Set(UML2!Class) =

	self.internalBaseClasses->union(p.internalBaseClasses);



helper context UML2!Package

def : supplierClasses(p : UML2!Package) : Set(UML2!Class) =

	self.allClasses->iterate(c; acc : Set(UML2!Class)= Set{}|

		acc->union(c.coupledClasses))->select(c|p.isInternal(c))->asSet();



helper context UML2!Package

def : supplierClassesInPackages(p : UML2!Package) : Set(UML2!Class) =

	self.internalSupplierClasses->union(p.internalSupplierClasses);



helper context UML2!Package

def : relatedClasses(p : UML2!Package) : Set(UML2!Class) =

	self.baseClasses(p)->union(self.supplierClasses(p));



helper context UML2!Package

def : CN() : Integer =

	self.allClasses->size();



helper context UML2!Package

def : PNAN() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.NAN);



helper context UML2!Package

def : PDAN() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.DAN());



helper context UML2!Package

def : PIAN() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.IAN());



helper context UML2!Package

def : POAN() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.OAN);



helper context UML2!Package

def : PAAN() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.AAN());



helper context UML2!Package

def : PNON() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.NON());



helper context UML2!Package

def : PDON() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.DON());



helper context UML2!Package

def : PION() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.ION());



helper context UML2!Package

def : POON() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.OON());



helper context UML2!Package

def : PAON() : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|acc + c.AON());



helper context UML2!Package

def : EILN(p : UML2!Package) : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|

		acc + c.parents->select(g|p.isInternal(g))->size());



helper context UML2!Package

def : IILN : Integer =

    self.allClasses->iterate(c; acc : Integer = 0|

        acc + c.parents->select(g|self.isInternal(g))->size());



helper context UML2!Package

def : PILN(p : UML2!Package) : Integer =

	self.IILN + self.EILN(p);



helper context UML2!Package

def : ECLN(p : UML2!Package) : Integer =

	self.supplierClassesInPackages(p)->size();



helper context UML2!Package

def : ICLN() : Integer =

	self.internalSupplierClasses->size();



helper context UML2!Package

def : PCLN(p : UML2!Package) : Integer =

	self.ICLN() + self.ECLN(p);



helper context UML2!Package

def : AVN(a : UML2!Property) : Integer =

	self.FVN(a);



helper context UML2!Package

def : OVN(o : UML2!Operation) : Integer =

	self.FVN(o);



helper context UML2!Package

def : FVN(f : UML2!Feature) : Integer =

	self.allClasses->iterate(c; acc : Integer = 0|

		if c.FCV(f)

			then acc + 1

			else acc

		endif);



helper context UML2!Package

def : APV(a : UML2!Property) : Real =

	if self.CN() > 1

		then (self.AVN(a) - 1) / (self.CN() - 1)

		else 0

	endif;



helper context UML2!Package

def : OPV(o : UML2!Operation) : Real =

	if self.CN() > 1

		then (self.OVN(o) - 1) / (self.CN() - 1)

		else 0

	endif;



helper context UML2!Package

def : FPV(f : UML2!Feature) : Real =

	if self.CN() > 1

		then (self.FVN(f) - 1) / (self.CN() - 1)

		else 0

	endif;

