module PNML2PetriNet;

create OUT : PetriNet from IN : PNML;



rule PetriNet {

	from

		n : PNML!PNMLDocument

	using{

			elementsSet : Set(PetriNet!Element) =

				PNML!NetContentElement.allInstances();

	

			arcsSet : Set(PetriNet!Arc) =

				PNML!Arc.allInstances();			

		}

	to

		p : PetriNet!PetriNet

		(

			location <- n.location,

			name <- n.nets.first().name.labels.first().text,

			elements <- elementsSet,

			arcs <- arcsSet

		)

}



rule Place {

	from

		n : PNML!Place

	to

		p : PetriNet!Place

		(

			location <- n.location,

			name <- n.name.labels.first().text,

			net <- n.net.document

		)

}



rule Transition {

	from

		n : PNML!Transition

	to

		p : PetriNet!Transition

		(

			location <- n.location,

			name <- n.name.labels.first().text,

			net <- n.net.document

		)

}



rule PlaceToTransition {

	from

		n : PNML!Arc 

		(	
			n.source.oclIsKindOf(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)

		)

	to

		p : PetriNet!PlaceToTransition

		(

			location <- n.location,

			name <- n.name.labels.first().text,

			net <- n.net.document,

			"from" <- n.source,

			"to" <- n.target

		)

}



rule TransitionToPlace {

	from

		n : PNML!Arc 

		(	
			n.source.oclIsKindOf(PNML!Transition) and n.target.oclIsKindOf(PNML!Place)

		)

	to

		p : PetriNet!TransitionToPlace

		(

			location <- n.location,

			name <- n.name.labels.first().text,

			net <- n.net.document,

			"from" <- n.source,

			"to" <- n.target

		)

}
