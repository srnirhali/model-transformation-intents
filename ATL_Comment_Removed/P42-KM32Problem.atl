module KM32Problem;

create OUT : Problem from IN : KM3;







helper def: allPackages : Sequence(KM3!Package) =

	KM3!Package.allInstances()->asSequence();



helper def: allClasses : Sequence(KM3!Class) =

	KM3!Class.allInstances()->asSequence();





helper context KM3!Class

	def: allStructuralFeaturesRec(s : Sequence(KM3!Class)) :

											Sequence(KM3!StructuralFeature) =

	self.structuralFeatures->union(

		self.supertypes->iterate(e; res : Sequence(KM3!Class) = Sequence{} |

			if s->includes(e)

			then

				res

			else

				res->union( e.allStructuralFeaturesRec(s->append(e)) )

			endif

		)

	);



helper context KM3!Class

	def: allStructuralFeatures() : Sequence(KM3!StructuralFeature) =

	self.allStructuralFeaturesRec(Sequence{self});



helper context KM3!Class

	def: recursiveInheritanceRec(c : KM3!Class,

								 s : Sequence(KM3!Class)) : Boolean =

	if self.supertypes->isEmpty()

	then

		false

	else

		if self.supertypes->exists(e | e = c)

		then

			true

		else

			self.supertypes->iterate(e; res : Boolean = false |

				if s->includes(e)

				then

					res

				else

					res or e.recursiveInheritanceRec(c, s->append(e))

				endif

			)

		endif

	endif;



helper context KM3!Class def: recursiveInheritance() : Boolean =

	self.recursiveInheritanceRec(self, Sequence{});







rule PackageNameUnique {

	from

		i : KM3!Package (

			thisModule.allPackages->exists(e | (i <> e) and (i.name = e.name))

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'a Package of the same name already exists: '

					+ i.name,

			location <- i.location

		)

}



rule ClassifierInPackage {

	from

		i : KM3!Classifier (

			i.package.oclIsUndefined()

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the Classifier ' + i.name

					+ ' must be contained by a Package',

			location <- i.location

		)

}



rule EnumLiteralInPackage {

	from

		i : KM3!EnumLiteral (

			i.package.oclIsUndefined()

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the EnumLiteral ' + i.name

					+ ' must be contained by a Package',

			location <- i.location

		)

}



rule StructuralFeatureInClass {

	from

		i : KM3!StructuralFeature (

			not i.package.oclIsUndefined()

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the Feature ' + i.name

					+ ' cannot be contained by a Package',

			location <- i.location

		)

}



rule OppositeOfOppositeExists {

	from

		i : KM3!Reference (

			if i.opposite.oclIsUndefined()

			then

				false

			else

				i.opposite.opposite.oclIsUndefined()

			endif

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the opposite of the opposite of Reference ' +

					i.owner.name + '::' + i.name +

					' should be defined',

			location <- i.location

		)

}



rule OppositeOfOppositeIsSelf {

	from

		i : KM3!Reference (

			if i.opposite.oclIsUndefined()

			then

				false

			else

				if i.opposite.opposite.oclIsUndefined()

				then

					false

				else

					i.opposite.opposite <> i

				endif

			endif

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the opposite of the opposite of Reference ' +

					i.owner.name + '::' + i.name +

					' should be this very same Reference',

			location <- i.location

		)

}



rule TypeOfOppositeIsOwner {

	from

		i : KM3!Reference (

			not

				if i.opposite.oclIsUndefined() then

					true

				else

					i.opposite.type = i.owner

				endif

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the type of the opposite of Reference ' +

					i.owner.name + '::' + i.name +

					' should be the owner of this Reference (' +

					i.owner.name + ')',

			location <- i.location

		)

}



rule ClassifierNameUniqueInPackage {

	from

		i : KM3!Classifier (

			i.package.contents->exists(e | (i <> e) and (i.name = e.name))

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'a Classifier named ' + i.name

					+ ' already exists in Package '

					+ i.package.name,

			location <- i.location

		)

}



rule ClassIsNotItsOwnSupertype {

	from

		i : KM3!Class (

			i.recursiveInheritance()

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <- 'the Class ' + i.name

							+ ' is its direct/indirect own supertype',

			location <- i.location

		)

}



rule StructuralFeatureNameUniqueInClass {

	from

		i : KM3!StructuralFeature (

			i.owner.allStructuralFeatures()

				->exists(e | (i <> e) and (i.name = e.name))

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'the Class ' + i.owner.name

					+ ' contains another feature (including inherited ones) '

					+ 'with the same name: '

					+ i.name,

			location <- i.location

		)

}



rule StructuralFeatureLower {

	from

		i : KM3!StructuralFeature (

			i.lower < 0

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'Lower bound value of Feature ' + i.owner.name + '::'

					+ i.name + 'is unvalid (lower than 0)',

			location <- i.location

		)

}



rule StructuralFeatureUpper {

	from

		i : KM3!StructuralFeature (

			(i.upper < 1) and (i.upper <> 0-1)

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'Upper bound of Feature ' + i.owner.name + '::'

					+ i.name + 'is unvalid (lower than 1)',

			location <- i.location

		)

}



rule StructuralFeatureLowerUpper {

	from

		i : KM3!StructuralFeature (

			(i.upper < i.lower) and (i.upper <> 0-1)

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'Upper bound of Feature ' + i.owner.name + '::'

					+ i.name + ' is lower than its lower bound',

			location <- i.location

		)

}



rule StructuralFeatureUniqueOrdered {

	from

		i : KM3!StructuralFeature (

			(i.upper = 1) and (i.isOrdered = true)

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'Feature ' + i.owner.name + '::' + i.name

					+ ' cannot be ordered with an upper bound equals to 1',

			location <- i.location

		)

}



rule DataTypeReferenceProhibited {

	from

		i : KM3!Reference (

			not i.type.oclIsTypeOf(KM3!Class)

		)

	to

		o : Problem!Problem (

			severity <- #error,

			description <-

					'Reference ' + i.owner.name + '::' + i.name

					+ ' cannot target a DataType element',

			location <- i.location

		)

}



rule ClassAttributeUnsupportedByEcore {

	from

		i : KM3!Attribute (

			i.type.oclIsTypeOf(KM3!Class)

		)

	to

		o : Problem!Problem (

			severity <- #warning,

			description <-

					'Class ' + i.owner.name + ' defines a class Attribute ('

					+ i.name

					+ ') that is not supported by the Ecore metamodel',

			location <- i.location

		)

}



rule AbstractClassShouldHaveChildren {

	from

		i : KM3!Class (

			i.isAbstract and

			(thisModule.allClasses

			 	->select(e | e.supertypes->includes(i))

				->isEmpty()

			 )

		)

	to

		o : Problem!Problem (

			severity <- #warning,

			description <- 'the abstract Class ' + i.name + ' has no children',

			location <- i.location

		)

}



rule ClassifierNameShouldStartWithUpperCase {

	from

		i : KM3!Classifier (

			let firstChar : String = i.name.substring(1, 1) in

				firstChar <> firstChar.toUpper()

		)

	to

		o : Problem!Problem (

			severity <- #critic,

			description <-

					'the name of Classifier ' + i.name

					+ ' should begin with an upper case',

			location <- i.location

		)

}

