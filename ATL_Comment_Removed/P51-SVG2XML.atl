

module SVG2XML; 
create OUT : XML from IN : SVG;



helper context SVG!Scale def : scale() : String =

	'scale(' + self.sx.toString() +

	if self.sy = self.sx

		then ''

		else ',' + self.sy.toString()

	endif + ')';



helper context SVG!Translate def : translate() : String =

	'translate(' + self.tx.toString() + ',' + self.ty.toString() + ')';



helper context SVG!Rotate def : rotate() : String =

	'rotate(' + self.angle.toString() + ')';



rule Svg2Root {

	from

		svg:SVG!Svg

	to

		root:XML!Root (

			name <- 'svg',

			children <- xmlns,

			children <- version,

			children <- thisModule.Attribute('width', if not svg.size.oclIsUndefined() then svg.size.width.toString() else '100%' endif),

			children <- thisModule.Attribute('height', if not svg.size.oclIsUndefined() then svg.size.height.toString() else '100%' endif),

			children <- svg.children

		),

		xmlns:XML!Attribute (

			name <- 'xmlns',

			value <- svg.namespace

		),

		version:XML!Attribute (

			name <- 'version',

			value <- svg.version

		)

}	



rule G2Element {

	from

		g:SVG!G

	using {

		transforms : Sequence(SVG!Transform) = g.attribute->select(a|a.oclIsKindOf(SVG!Transform));

		transformValue : String = transforms->iterate(transf; str:String=''|str +

			if transf.oclIsTypeOf(SVG!Scale)

				then transf.scale()

				else if transf.oclIsTypeOf(SVG!Translate)

					then transf.translate()

					else if transf.oclIsTypeOf(SVG!Rotate)

						then transf.rotate()

						else ''

					endif

				endif

			endif +

			if transf <> transforms->last()

				then ' '

				else ''

			endif);	

	}

	to

		elmt:XML!Element (

			name <- 'g',

			children <- thisModule.Attribute('transform', if transforms->notEmpty() then transformValue else '' endif),

			children <- thisModule.Attribute('fill', if not g.fill.oclIsUndefined() then g.fill else 'black' endif),

			children <- g.groupContent

		)

}	



rule Rect2Element {

	from

		rect:SVG!Rect

	to

		elmt:XML!Element (

			name <- 'rect',

			children <- thisModule.Attribute('x', if not rect.position.oclIsUndefined() then rect.position.x.toString() else '0' endif),

			children <- thisModule.Attribute('y', if not rect.position.oclIsUndefined() then rect.position.y.toString() else '0' endif),

			children <- thisModule.Attribute('width', if not rect.size.oclIsUndefined() then rect.size.width.toString() else '100%' endif),

			children <- thisModule.Attribute('height', if not rect.size.oclIsUndefined() then rect.size.height.toString() else '100%' endif),

			children <- thisModule.Attribute('fill', if not rect.fill.oclIsUndefined() then rect.fill else 'black' endif),

			children <- thisModule.Attribute('stroke', if not rect.stroke.oclIsUndefined() then rect.stroke else 'none' endif)

		)

}	



rule Circle2Element {

	from

		circ:SVG!Circle

	to

		elmt:XML!Element (

			name <- 'circle',

			children <- thisModule.Attribute('x', if not circ.position.oclIsUndefined() then circ.position.x.toString() else '0' endif),

			children <- thisModule.Attribute('y', if not circ.position.oclIsUndefined() then circ.position.y.toString() else '0' endif),

			children <- thisModule.Attribute('r', if not circ.size.oclIsUndefined() then circ.size.width.toString() else '100%' endif),

			children <- thisModule.Attribute('fill', if not circ.fill.oclIsUndefined() then circ.fill else 'black' endif),

			children <- thisModule.Attribute('stroke', if not circ.stroke.oclIsUndefined() then circ.stroke else 'none' endif)

		)

}	



rule Path2Element {

	from

		path:SVG!Path

	to

		elmt:XML!Element (

			name <- 'path',

			children <- thisModule.Attribute('d', path.d),

			children <- thisModule.Attribute('fill', if not path.fill.oclIsUndefined() then path.fill else 'black' endif),

			children <- thisModule.Attribute('stroke', if not path.stroke.oclIsUndefined() then path.stroke else 'none' endif)

		)

}	



rule Text2Element {

	from

		text:SVG!Text

	to

		elmt:XML!Element (

			name <- 'text',

			children <- thisModule.Attribute('x', if not text.position.oclIsUndefined() then text.position.x.toString() else '0' endif),

			children <- thisModule.Attribute('y', if not text.position.oclIsUndefined() then text.position.y.toString() else '0' endif),

			children <- thisModule.Attribute('stroke', if not text.stroke.oclIsUndefined() then text.stroke else 'none' endif),

			children <-	thisModule.Attribute('font-size', if not text.fontSize.oclIsUndefined() then text.fontSize else 'medium' endif),

			
			children <- thisModule.Attribute('text-anchor', if not text.lengthAdjust.oclIsUndefined() then text.lengthAdjust else 'start' endif),

			children <- txt

		),

		txt:XML!Text (

			value <- text.content

		)

}	



lazy rule Attribute {

	from

		attrName:String,

		attrValue:String

	to

		attr:XML!Attribute (

			name <- attrName,

			value <- attrValue

		)

}	

