



module R2ML2WSDL; 					
create OUT : WSDL from IN : R2ML;





helper def: setElemName(serviceName : String, elemName : String) : String =

	if serviceName.endsWith('Service') then

	    let fromIndex : Integer = 1  in

		let toIndex : Integer = serviceName.lastIndexOf('Service')  in	

		serviceName.substring(fromIndex, toIndex).concat(elemName)

	else OclUndefined

	endif ;



helper def: getAllRRWithThisGroupID(value : String) : Sequence(R2ML!ReactionRule) =

	R2ML!ReactionRule.allInstances()->asSequence()->select(c| c.groupID = value);

	

helper context R2ML!Type def: getClassWithThisName() : R2ML!Class =

	R2ML!Class.allInstances()->asSequence()->select(c| c.name = self.name)->first();



helper context R2ML!Type def: getMessageTypeWithThisName() : R2ML!MessageType =

	R2ML!MessageType.allInstances()->asSequence()->select(c| c.name = self.name)->first();



helper context R2ML!Type def: getFaultMessageTypeWithThisName() : R2ML!FaultMessageType =

	R2ML!FaultMessageType.allInstances()->asSequence()->select(c| c.name = self.name)->first();







rule Description {

	from i : R2ML!RuleBase ( 

				i.oclIsTypeOf(R2ML!RuleBase)

			)

	to o : WSDL!Description (

				types <- i.vocabularies,

				service <- i.rules->select(c| c.oclIsTypeOf(R2ML!ReactionRuleSet)), 

				interface <- i.rules->select(c| c.oclIsTypeOf(R2ML!ReactionRuleSet))->collect( e | thisModule.resolveTemp(e, 'inter'))

			)

}



rule ElementType {

	from i : R2ML!Vocabulary (

				i.oclIsTypeOf(R2ML!Vocabulary)

			)

	to o : WSDL!ElementType (

				schema <- schema

			),

	schema : WSDL!XsSchema (

			    schemaLocation <- 'http://www.w3.org/2006/01/wsdl',

				targetNamespace <- 'http://www.bookingservice.com/?wsdl',

				elementDeclarations <- i.entries

			)

}



rule XsElementDeclarationCL {

	from i : R2ML!Class (

				i.oclIsTypeOf(R2ML!Class)

			)		

	to ele : WSDL!XsElementDeclaration (

				name <- i.name,

				typeDefinition <- complex

			),

		complex : WSDL!XsComplexTypeDefinition (                 

				content <- con

			),

		con : WSDL!XsParticle (

				term <- ter

			),

		ter : WSDL!XsModelGroup (

				compositor <- #sequence,

				particles <- Sequence { i.attributes,

										if not i.referencePropertyRef.oclIsUndefined() then

											i.referencePropertyRef

										else OclUndefined

										endif

									   }

			)

}



rule XsElementDeclarationMT {

	from i : R2ML!MessageType (

				i.oclIsTypeOf(R2ML!MessageType)

			)		

	to ele : WSDL!XsElementDeclaration (

				name <- i.name,

				typeDefinition <- complex

			),

		complex : WSDL!XsComplexTypeDefinition (                 

				content <- con

			),

		con : WSDL!XsParticle (

				term <- ter

			),

		ter : WSDL!XsModelGroup (

				compositor <- #sequence,

				particles <- Sequence { i.attributes,

										if not i.referencePropertyRef.oclIsUndefined() then

											i.referencePropertyRef

										else OclUndefined

										endif

									  }

			)

}



rule XsElementDeclarationFMT {

	from i : R2ML!FaultMessageType (

				i.oclIsTypeOf(R2ML!FaultMessageType)

			)		

	to ele : WSDL!XsElementDeclaration (

				name <- i.name,

				typeDefinition <- complex

			),

		complex : WSDL!XsComplexTypeDefinition (                 

				content <- con

			),

		con : WSDL!XsParticle (

				term <- ter

			),

		ter : WSDL!XsModelGroup (

				compositor <- #sequence,

				particles <- Sequence { i.attributes,

										if not i.referencePropertyRef.oclIsUndefined() then

											i.referencePropertyRef

										else OclUndefined

										endif

									   }

			)	

}



rule XsParticleREF {

	from i : R2ML!ReferenceProperty (

				i.oclIsTypeOf(R2ML!ReferenceProperty)

			)		

	to	part : WSDL!XsParticle (                 

				content <- ele

			),

		ele : WSDL!XsElementDeclaration (

				name <- i.name,

				resolvedElementDeclaration <- i.range.getClassWithThisName()	
			)

}



rule XsParticleATT {

	from i : R2ML!Attribute (

				i.oclIsTypeOf(R2ML!Attribute)

			)		

	to	part : WSDL!XsParticle (                 

				content <- ele

			),

		ele : WSDL!XsElementDeclaration (

				name <- i.name,

				typeDefinition <- if not i.range.oclIsUndefined() then

									thisModule.SimpleType(i.range)

								  else OclUndefined

								  endif

			)

}



unique lazy rule SimpleType {

	from i : R2ML!Datatype

	to o : WSDL!XsSimpleTypeDefinition (

			name <- i.name

		)		

}



rule Interface {

	from i : R2ML!ReactionRuleSet (

				i.oclIsTypeOf(R2ML!ReactionRuleSet)

			)		

	to	serv : WSDL!Service (

				name <- i.ruleSetID,

				interface <- inter,				

				endpoint <- en

			),

	inter : WSDL!Interface (

				name <- thisModule.setElemName(i.ruleSetID, 'Interface'),

				fault <- i.rules,

				operation <- let setOfGroupIDs : Set (String) = i.rules->iterate(p; s : Set(String) = Set{} |

							 									s->including(p.groupID) ) in

								setOfGroupIDs->collect(e| 

									thisModule.Operation(i.rules->asSequence()->select(c| c.groupID = e)->first()) 

													   )

			),

		en : WSDL!Endpoint (                 

				name <- thisModule.setElemName(i.ruleSetID, 'Endpoint'),

				address <- i.rules->select(c| c.oclIsTypeOf(R2ML!ReactionRule) and not

					c.producedAction.type.oclIsTypeOf(R2ML!FaultMessageType))->first().producedAction.sender

		)

}



rule Fault {

	from i : R2ML!ReactionRule (

				i.oclIsTypeOf(R2ML!ReactionRule) and

				i.producedAction.type.oclIsTypeOf(R2ML!FaultMessageType)

			)		

	to	part : WSDL!Fault (

				name <- i.producedAction.type.name,

				element <- i.producedAction.type.getFaultMessageTypeWithThisName()

			)

}



lazy rule Operation {

	from i : R2ML!ReactionRule

	to	part : WSDL!Operation (

				name <- i.groupID,

				pattern <- if thisModule.getAllRRWithThisGroupID(i.groupID).size() = 2 then

								#inout

							else #inonly

							endif,

				input <- thisModule.Input(i.triggeringEvent),

				output <- let rr1 : R2ML!ReactionRule =

						thisModule.getAllRRWithThisGroupID(i.groupID)->

						select(c| not c.producedAction.type.oclIsTypeOf(R2ML!FaultMessageType))->first()

						in

							if not rr1.oclIsUndefined() then

								thisModule.Output(rr1.producedAction)

							else OclUndefined

							endif,

				outfault <- let rr2 : R2ML!ReactionRule =

						thisModule.getAllRRWithThisGroupID(i.groupID)->

						select(c| c.producedAction.type.oclIsTypeOf(R2ML!FaultMessageType))->first()

						in

							if not rr2.oclIsUndefined() then

								thisModule.Outfault(rr2)

							else OclUndefined

							endif						

			)

}



lazy rule Input {

	from i : R2ML!MessageEventExpression (

				i.oclIsTypeOf(R2ML!MessageEventExpression)

			)		

	to	part : WSDL!Input (

				messageLabel <- 'In',

				element <- i.type.getMessageTypeWithThisName()

			)

}



lazy rule Output {

	from i : R2ML!MessageEventExpression (

				i.oclIsTypeOf(R2ML!MessageEventExpression)

			)		

	to	part : WSDL!Output (

				messageLabel <- 'Out',

				element <- i.type.getMessageTypeWithThisName()

			)

}



lazy rule Outfault {

	from i : R2ML!ReactionRule (

				i.oclIsTypeOf(R2ML!ReactionRule)

			)		

	to	part : WSDL!Outfault (

				messageLabel <- 'Out',

				fault <- i

			)

}



