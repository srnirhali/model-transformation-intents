module SoftwareQualityControl2Mantis; 
create OUT : Mantis from IN : SoftwareQualityControl;





helper def: convertStatus(bs : SoftwareQualityControl!BugStatusType) :  String =

	let sv : String = bs.toString()

	in

		sv.substring(5,sv.size()); 



helper context SoftwareQualityControl!Bug def: getResponsibleName() :  String =

	let rv : String = self.responsible

	in

		if rv.oclIsUndefined()

		then

			self.b_bugTracking.ct_control.responsible

		else

			rv

		endif;







rule  BugTracking2MantisRoot {

	from

		bt : SoftwareQualityControl!BugTracking

	

	to

		mr : Mantis!MantisRoot (

			issues <- bt.bugs->collect(e | thisModule.resolveTemp(e, 'mi'))

		)

}





rule  Bug2Issue {

	from

		bbt : SoftwareQualityControl!Bug

	using {

		commentsAnswersOrNot : Sequence(String) =

			let ca : String = bbt.commentsAnswers

			in

				if ca.oclIsUndefined()

				then

					Sequence{}

				else

					Sequence{ca}

				endif;

	}

	to

		mi : Mantis!Issue (

			id <- bbt.number,

			project <- proj,

			category <- '',

			priority <- prior,

			severity <- sev,

			status <- stat,

			reporter <- rep,

			summary <- '',

			description <- bbt.description,

			version <- bbt.componentVersion,

			reproducibility <- reprod,

			dateSubmitted <- 0, 
			assignedTo <- at,

			attachments <- Sequence{},

			relationships <- Sequence{},

			notes <- Sequence{note},

			lastUpdate <- 0 
		),

		proj : Mantis!ValueWithId (

			id <- 0,

			value <- bbt.b_bugTracking.ct_control.component

		),

		prior : Mantis!ValueWithId (

			id <- 0,

			value <- ''

		),

		sev : Mantis!ValueWithId (

			id <- 0,

			value <- ''

		),

		stat : Mantis!ValueWithId (

			id <- 0,

			value <- thisModule.convertStatus(bbt.status)

		),

		rep : Mantis!Person (

			id <- 0,

			value <- bbt.originator,

			login <-''

		),

		reprod : Mantis!ValueWithId (

			id <- 0,

			value <- ''

		),

		at : Mantis!Person (

			id <- 0,

			value <- bbt.getResponsibleName(),

			login <-''

		), 

		note : distinct Mantis!Note foreach(commentsAnswersVal in commentsAnswersOrNot)(

			timestamp <- 0,

			author <- aut,

			text <- commentsAnswersVal

		),

		aut : distinct Mantis!Person foreach(commentsAnswersVal in commentsAnswersOrNot)(

			id <- 0,

			value <- bbt.originator,

			login <-''

		)

}
