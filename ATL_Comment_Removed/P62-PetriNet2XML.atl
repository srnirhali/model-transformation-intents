module PetriNet2XML;

create OUT : XML from IN : PetriNet;









helper def: allPlaces : Sequence(PetriNet!Place) = 

	PetriNet!Place.allInstances()->asSequence();





helper def: allTransitions : Sequence(PetriNet!Transition) = 

	PetriNet!Transition.allInstances()->asSequence();





helper def: allArcs : Sequence(PetriNet!Arc) = 

	PetriNet!Arc.allInstances()->asSequence();









rule Main {

	from

        pn : PetriNet!PetriNet

	to 

		root : XML!Root (

			name <- 'pnml',

			children <- Sequence{xmlns, net}

		),

		xmlns: XML!Attribute (

			name <- 'xmlns',

			value <- 'http://www.example.org/pnpl'

		),

		

		net : XML!Element (

			name <- 'net',

			children <- Sequence{

							id,

							type,

							name,

							thisModule.allPlaces,

							thisModule.allTransitions,

							thisModule.allArcs

						}

		),

		id : XML!Attribute (

			name <- 'id',

			value <- 'n1'

		),

		type : XML!Attribute (

			name <- 'type',

			value <- 'http://www.example.org/pnpl/PTNet'

		),

		

		name : XML!Element (

			name <- 'name',

			children <- Sequence{text}

		),

		text : XML!Element (

			name <- 'text',

			children <- Sequence{val}

		),

		val : XML!Text (

			value <- pn.name

		)

}





rule Place {

	from

        pn_s : PetriNet!Place

	to 

		xml_place : XML!Element (

			name <- 'place',

			children <- Sequence{id, name}

		),

		id : XML!Attribute (

			name <- 'id',

			value <- thisModule.allPlaces->indexOf(pn_s).toString()

		),

		

		name : XML!Element (

			name <- 'name',

			children <- Sequence{text}

		),

		text : XML!Element (

			name <- 'text',

			children <- Sequence{val}

		),

		val : XML!Text (

			value <- pn_s.name

		)

}





rule Transition {

	from

       pn_t : PetriNet!Transition

	to 

		xml_trans : XML!Element (

			name <- 'transition',

			children <- Sequence{trans_id}

		),

		trans_id : XML!Attribute (

			name <- 'id',

			value <- (thisModule.allPlaces->size() +

					  thisModule.allTransitions->indexOf(pn_t)).toString()

		)

}





rule PlaceToTransArc {

	from

		pn_a : PetriNet!PlaceToTransArc

	to 

		xml_arc : XML!Element (

			name <- 'arc',

			children <- Sequence{id, source, target}

		),

		id : XML!Attribute (

			name <- 'id',

			value <- (thisModule.allPlaces->size() +

					  thisModule.allTransitions->size() +

					  thisModule.allArcs->indexOf(pn_a)).toString()

		),

		source : XML!Attribute (

			name <- 'source',

			value <- thisModule.allPlaces

						->indexOf(pn_a.source).toString()

		),

		target : XML!Attribute (

			name <- 'target',

			value <- (thisModule.allPlaces->size() + 

					  thisModule.allTransitions

						->indexOf(pn_a.target)).toString()

		)

}





rule TransToPlaceArc {

	from

		pn_a : PetriNet!TransToPlaceArc

	to 

		xml_arc : XML!Element (

			name <- 'arc',

			children <- Sequence{id, source, target}

		),

		id : XML!Attribute (

			name <- 'id',

			value <- (thisModule.allPlaces->size() +

					  thisModule.allTransitions->size() +

					  thisModule.allArcs->indexOf(pn_a)).toString()

		),

		source : XML!Attribute (

			name <- 'source',

			value <- (thisModule.allPlaces->size() + 

					  thisModule.allTransitions

						->indexOf(pn_a.source)).toString()

		),

		target : XML!Attribute (

			name <- 'target',

			value <- thisModule.allPlaces

						->indexOf(pn_a.target).toString()

		)

}

