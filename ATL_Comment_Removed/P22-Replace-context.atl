

module Replace; 
create OUT : KM3target from IN : KM3;





rule Metamodel {

	from

		inputMm:KM3!Metamodel

	to

		outputMm:KM3target!Metamodel (

			location <- inputMm.location,

			contents <- inputMm.contents

		)

}



rule Package {

	from

		inputPkg:KM3!Package

	to

		outputPkg:KM3target!Package (

			name <- inputPkg.name,

			contents <- inputPkg.contents

		)

}



rule ClassA {

	from

		inputA:KM3!Class (

			inputA.supertypes.isEmpty()

		)

	to

		outputA:KM3target!Class (

			name <- inputA.name,

			isAbstract <- inputA.isAbstract

		)

}



rule ClassB {

	from

		inputB:KM3!Class (

			not(inputB.supertypes.isEmpty())

		)

	to

		outputB:KM3target!Class (

			name <- inputB.name,

			isAbstract <- inputB.isAbstract,

			structuralFeatures <- inputB.supertypes->iterate(a;acc : Sequence(KM3!StructuralFeature) = Sequence{}|

																acc->including(thisModule.Inherit2Association(a,inputB))

															)

		)

}



lazy rule Inherit2Association {

	from

		supertype:KM3!Class,

		children:KM3!Class

	to

		refChildren : KM3target!Reference (

			name <- 'inherit'+supertype.name,

			opposite <- refSupertype,

			owner <- children,

			type <- supertype,

			lower <- 1,

			upper <- 1

		),



		refSupertype : KM3target!Reference( 

			name <- 'children'+children.name,

			opposite <- refChildren,

			owner <- supertype,

			type <- children,

			lower <- 1,

			upper <- 1

		)	

}



rule attribute {

	from

		inputAtt:KM3!Attribute 

	to

		outputAtt:KM3target!Attribute(

			name <- inputAtt.name,

			isOrdered <- inputAtt.isOrdered,

			isUnique <- inputAtt.isUnique,

			location <- inputAtt.location,

			lower <- inputAtt.lower,

			upper <- inputAtt.upper,

			type <- inputAtt.type,

			owner <- inputAtt.owner

			

		)

}



rule DataType {

from

		inputData:KM3!DataType

	to

		outputData:KM3target!DataType(

			name <- inputData.name,

			location <- inputData.location

		)

}



rule reference {

	from

		inputRef:KM3!Reference 

	to

		outputRef:KM3target!Reference (

			name <- inputRef.name,

			isOrdered <- inputRef.isOrdered,

			isUnique <- inputRef.isUnique,

			location <- inputRef.location,

			lower <- inputRef.lower,

			upper <- inputRef.upper,

			type <- inputRef.type,

			owner <- inputRef.owner,

			opposite <- inputRef.opposite

		)

}



rule enumeration {

	from

		inputEnum:KM3!Enumeration 

	to

		outputEnum:KM3target!Enumeration (

			location <- inputEnum.location,

			name  <- inputEnum.name,

			package  <- inputEnum.package

		)



}



rule literal {

	from

		inputEnum:KM3!EnumLiteral

	to

		outputEnum:KM3target!EnumLiteral (

			location <- inputEnum.location,

			name  <- inputEnum.name,

			enum  <- inputEnum.enum

		)



}

