

module RedundantClassRemovable; 
create OUT : UML2Target from IN : UML2;





helper def: assoMap : Map(UML2!Class, Sequence(UML2!Class)) = Map{};

rule isAlreadyConsidered(ref1 : UML2!Class, ref2 : UML2!Class) {



	do {

		if (not thisModule.assoMap.get(ref2).oclIsUndefined()) {

			if (thisModule.assoMap.get(ref2)->includes(ref1)) {

				true;

			}

			else {

			    if (not thisModule.assoMap.get(ref1).oclIsUndefined()) {

					thisModule.assoMap <- thisModule.assoMap.including(ref1,thisModule.assoMap.get(ref1)->including(ref2));

					false;

			    }

				else {

					thisModule.assoMap <- thisModule.assoMap.including(ref1, Sequence{ref2});

					false;

				}

			}

		}

		else  {

				if (not thisModule.assoMap.get(ref1).oclIsUndefined()) {

					thisModule.assoMap <- thisModule.assoMap.including(ref1,thisModule.assoMap.get(ref1)->including(ref2));

					false;

			    }

				else {	

					thisModule.assoMap <- thisModule.assoMap.including(ref1, Sequence{ref2});

					false;

				}

		}

		

	}

}



helper def: isRedundantClass : Set(UML2!Class) =

	UML2!Class->allInstances()->select(c|c.oclIsTypeOf(UML2!Class))->

		iterate(inputC1; acc : Sequence(UML2!Class) = Sequence{} | acc->including(UML2!Class->allInstances()->

		select(c|c.oclIsTypeOf(UML2!Class))->

		iterate(inputC2; acc1 : Sequence(UML2!Class) = Sequence{} | 

		acc1->including(

		if

			(inputC1<> inputC2

			and inputC1.ownedAttribute->size() = inputC2.ownedAttribute->size()

			and inputC1.ownedRule->size() = inputC2.ownedRule->size()

			and inputC1.ownedAttribute->collect(a|a.type)->asSet() = inputC2.ownedAttribute->collect(a|a.type)->asSet()

			and (not thisModule.isAlreadyConsidered(inputC1, inputC2)))

		then

			inputC1

		else 

			Sequence{}

		endif

		)

	)

	)->flatten())->flatten()

	;





rule Model {

	from

		inputM : UML2!Model

	to

		outputM : UML2Target!Model (

			name <- inputM.name,

			ownedMember <- inputM.ownedMember->select(c|c.oclIsTypeOf(UML2!Class))->select(c| not thisModule.isRedundantClass->includes(c)),

			ownedMember <- inputM.ownedMember->select(c|not c.oclIsTypeOf(UML2!Class))

		)

}



rule DataType {

	from 

		inputC : UML2!DataType

	to

		outputC : UML2Target!DataType (

		name <- inputC.name

		)

}



rule LiteralNull {

	from 

		inputLN : UML2!LiteralNull

		(if inputLN.owner.oclIsTypeOf(UML2!Constraint)

			then

				not (thisModule.isRedundantClass->

					 includes(inputLN.owner.namespace))

			else

				not (if inputLN.owner.owningAssociation->oclIsUndefined()

						then true

						else inputLN.owner.owningAssociation.member->

							exists(p| thisModule.isRedundantClass->includes(p.type))

						endif)

			endif 

		)

	to

		outputLN : UML2Target!LiteralNull

}



rule LiteralInteger {

	from 

		inputLI : UML2!LiteralInteger

		(if inputLI.owner.oclIsTypeOf(UML2!Constraint)

			then

				not (thisModule.isRedundantClass->

					 includes(inputLI.owner.namespace))

			else

				not (if inputLI.owner.owningAssociation->oclIsUndefined()

						then true

						else inputLI.owner.owningAssociation.member->

							exists(p| thisModule.isRedundantClass->includes(p.type))

						endif)

			endif 

		)

	to

		outputLI : UML2Target!LiteralInteger (

			value <- inputLI.value	

		)

}



rule LiteralUnlimitedNatural {

	from 

		inputLUN : UML2!LiteralUnlimitedNatural

		(if inputLUN.owner.oclIsTypeOf(UML2!Constraint)

			then

				not (thisModule.isRedundantClass->

					 includes(inputLUN.owner.namespace))

			else

				not (if inputLUN.owner.owningAssociation->oclIsUndefined()

						then true

						else inputLUN.owner.owningAssociation.member->

							exists(p| thisModule.isRedundantClass->includes(p.type))

						endif)

			endif 

		)

	to

		outputLUN : UML2Target!LiteralUnlimitedNatural (

			value <- inputLUN.value	

		)

}



rule LiteralString {

	from 

		inputLS : UML2!LiteralString

		(if inputLS.owner.oclIsTypeOf(UML2!Constraint)

			then

				not (thisModule.isRedundantClass->

					 includes(inputLS.owner.namespace))

			else

				not (if inputLS.owner.owningAssociation->oclIsUndefined()

						then true

						else inputLS.owner.owningAssociation.member->

							exists(p| thisModule.isRedundantClass->includes(p.type))

						endif)

			endif 

		)

	to

		outputLS : UML2Target!LiteralString (

			value <- inputLS.value	

		)

}



rule Association {

	from 

		inputA : UML2!Association

		(not inputA.member->exists(p| thisModule.isRedundantClass->includes(p.type)))

	to 

		outputA : UML2Target!Association (

			name <- inputA.name,

			memberEnd <- inputA.memberEnd

	)

}



rule Property {

	from 

		inputP : UML2!Property

		(not (thisModule.isRedundantClass->includes(inputP.class_) 

			or thisModule.isRedundantClass->includes(inputP.type)

			or (if inputP.owningAssociation->oclIsUndefined()

				then false

				else inputP.owningAssociation.member->

			exists(p| thisModule.isRedundantClass->includes(p.type))

			endif)

			))

	to

		outputP : UML2Target!Property (

			owningAssociation <- inputP.owningAssociation,

			name <- inputP.name,

			type <- inputP.type,

			upperValue <- inputP.upperValue,

			lowerValue <- inputP.lowerValue,

			defaultValue <-inputP.defaultValue

		)

}



rule Constraint {

	from 

		inputC : UML2!Constraint

		(not thisModule.isRedundantClass->includes(inputC.namespace))

	to

		outputC : UML2Target!Constraint (

			name <-	inputC.name,

			namespace <- inputC.namespace,

			specification <- inputC.specification

		)

}



rule Class {

	from 

		inputC : UML2!Class

		(not thisModule.isRedundantClass->includes(inputC))

	to 

		outputC : UML2Target!Class (

			name <- inputC.name,

			ownedOperation <- inputC.ownedOperation,

			nestedClassifier <-  inputC.nestedClassifier,

			isActive <-  inputC.isActive,

			ownedReception <-  inputC.ownedReception,

			ownedAttribute <- inputC.ownedAttribute

		)

}

